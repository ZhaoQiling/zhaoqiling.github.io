<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhao70&#39;s Blog</title>
  <subtitle>记录，造轮子，进步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-29T13:47:58.967Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhao70</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++产生随机数</title>
    <link href="http://yoursite.com/2017/03/29/C-%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/29/C-产生随机数/</id>
    <published>2017-03-29T13:14:26.000Z</published>
    <updated>2017-03-29T13:47:58.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前-tu-言-cao"><a href="#前-tu-言-cao" class="headerlink" title="前(tu)言(cao)"></a>前(tu)言(cao)</h2><blockquote>
<p>在做蓝桥2012预赛试题的时候， 做到“夺冠概率”这道题， 明明可以用数学上的方法求解。 结果，必须使用随机数，因为三次运行程序结果相同不给分。。。</p>
</blockquote>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>足球比赛具有一定程度的偶然性，弱队也有战胜强队的可能。<br>假设有甲、乙、丙、丁四个球队。根据他们过去比赛的成绩，得出每个队与另一个队对阵时取胜的概率表:<br>    &nbsp;    &nbsp;    &nbsp;    &nbsp;甲  乙  丙  丁<br>甲   -  0.1 0.3 0.5<br>乙 0.9  -   0.7 0.4<br>丙 0.7  0.3 -   0.2<br>丁 0.5  0.6 0.8 -<br>数据含义：甲对乙的取胜概率为0.1，丙对乙的胜率为0.3，…<br>现在要举行一次锦标赛。双方抽签，分两个组比，获胜的两个队再争夺冠军。（参见【1.jpg】）<br>请你进行10万次模拟，计算出甲队夺冠的概率。</p>
</blockquote>
<p><img src="\img\championships.jpg" alt="&quot;图一&quot;"></p>
<h2 id="评测标准"><a href="#评测标准" class="headerlink" title="评测标准"></a>评测标准</h2><p>满分17分</p>
<p>编译选手提供的源代码，运行看结果</p>
<p>!! 至少运行3次，如果结果相同则不能得分！ 说明选手是用理论推算而非模拟方法。</p>
<p>输出四舍五入后为： 0.075  或  0.076 即可满分17分</p>
<p>如果输出 7.5 或 7.6 是采用了百分数的形式，也认为正确。</p>
<p>多次运行结果为：0.074 或 0.077 表明存在设计上的系统误差，可以给 5 分</p>
<h2 id="如何产生随机数"><a href="#如何产生随机数" class="headerlink" title="如何产生随机数"></a>如何产生随机数</h2><ol>
<li>添加头文件stdlib.h</li>
<li>由于rand()返回的是伪随机数字， 每次执行时结果是相同的</li>
<li><p>为了避免每次生成固定的随机数，引进srand()函数</p>
<blockquote>
<p>用法：srand(unsigned int seed)</p>
</blockquote>
</li>
<li><p>可以利用<time.h>中的随机函数初始化, 产生不同的随机种子</time.h></p>
</li>
<li>srand((unsigned)time(NULL))</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> arr[<span class="number">3</span>] = &#123;<span class="number">0.046</span>, <span class="number">0.102</span>, <span class="number">0.08</span>&#125;;</div><div class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="comment">//这里srand只能写在for循环外侧，否则会WA</span></div><div class="line">	<span class="comment">//看来srand的seed整个程序运行时只执行一次即可</span></div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span> ; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> val = rand() % <span class="number">3</span>;</div><div class="line">        sum = sum + arr[val];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; sum / <span class="number">100000</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前-tu-言-cao&quot;&gt;&lt;a href=&quot;#前-tu-言-cao&quot; class=&quot;headerlink&quot; title=&quot;前(tu)言(cao)&quot;&gt;&lt;/a&gt;前(tu)言(cao)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在做蓝桥2012预赛试题的时候， 做到“夺冠概
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
      <category term="随机数" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>微生物增殖</title>
    <link href="http://yoursite.com/2017/03/29/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%A2%9E%E6%AE%96/"/>
    <id>http://yoursite.com/2017/03/29/微生物增殖/</id>
    <published>2017-03-29T12:42:06.000Z</published>
    <updated>2017-03-29T13:12:57.409Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>题目来源<br>2012年蓝桥杯预赛</p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>假设有两种微生物 X 和 Y<br>X出生后每隔3分钟分裂一次（数目加倍），Y出生后每隔2分钟分裂一次（数目加倍）。<br>一个新出生的X，半分钟之后吃掉1个Y，并且，从此开始，每隔1分钟吃1个Y。<br>现在已知有新出生的 X=10, Y=89，求60分钟后Y的数目。<br>如果X=10，Y=90  呢？<br>本题的要求就是写出这两种初始条件下，60分钟后Y的数目。<br>题目的结果令你震惊吗？这不是简单的数字游戏！真实的生物圈有着同样脆弱的性质！也许因为你消灭的那只 Y 就是最终导致 Y 种群灭绝的最后一根稻草！<br>请忍住悲伤，把答案写在“解答.txt”中，不要写在这里！</p>
</blockquote>
<h2 id="思路与感悟"><a href="#思路与感悟" class="headerlink" title="思路与感悟"></a>思路与感悟</h2><p>遇到这种模拟类的题目，最好还是不要随意更改题目，先<strong>按照0.5秒来模拟</strong>一下， <strong>打表</strong>， <strong>找出规律</strong>后再为了<strong>计算的精确性</strong>， <strong>更改时间周期</strong>。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nX, nY;</div><div class="line">    nX = <span class="number">10</span>;</div><div class="line">    nY = <span class="number">90</span>;</div><div class="line">    <span class="comment">// i 为 0.5分钟</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">120</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            nY = nY - nX;</div><div class="line">        <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>)</div><div class="line">            nY = nY * <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(i % <span class="number">6</span> == <span class="number">0</span>)</div><div class="line">            nX = nX * <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; nX &lt;&lt; <span class="string">" "</span> &lt;&lt; nY;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/qsyzb/article/details/19156551?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">丁棒儿的博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来源&lt;br&gt;2012年蓝桥杯预赛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;blockquote&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="模拟算法" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>国际歌</title>
    <link href="http://yoursite.com/2017/03/28/%E5%9B%BD%E9%99%85%E6%AD%8C/"/>
    <id>http://yoursite.com/2017/03/28/国际歌/</id>
    <published>2017-03-28T14:42:05.000Z</published>
    <updated>2017-03-28T14:44:10.328Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=130133&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欧拉回路</title>
    <link href="http://yoursite.com/2017/03/27/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/03/27/欧拉回路/</id>
    <published>2017-03-27T14:43:26.000Z</published>
    <updated>2017-03-27T14:52:20.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>欧拉环：图中经过<em>每条边一次且仅一次</em>的<strong>环</strong>；<br>欧拉路径：图中经过<em>每条边一次且仅一次</em>的<strong>路径</strong>；<br>欧拉图：有<strong>至少一个欧拉环</strong>的图；<br>半欧拉图：<strong>没有欧拉环</strong>，但有<strong>至少一条欧拉路径</strong>的图。</p>
<h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><p>一个无向图是<strong>欧拉图</strong>当且仅当该图是连通的（注意，不考虑图中度为0的点，因为它们的存在对于图中是否存在欧拉环、欧拉路径没有影响）且<strong>所有点的度数都是偶数</strong>；一个无向图是<strong>半欧拉图</strong>当且仅当该图是连通的且<strong>有且只有2个点的度数是奇数</strong>（此时这两个点只能作为欧拉路径的起点和终点）；</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>因为任意一个点，欧拉环（或欧拉路径）从它这里进去多少次就要出来多少次，故(进去的次数+出来的次数)为偶数，又因为(进去的次数+出来的次数)=该点的度数（根据定义），所以该点的度数为偶数。</p>
<h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><p>一个有向图是<strong>欧拉图</strong>当且仅当该图的基图（将所有有向边变为无向边后形成的无向图，这里同样不考虑度数为0的点）是连通的且<strong>所有点的入度等于出度</strong>；一个有向图是<strong>半欧拉图</strong>当且仅当该图的基图是连通的且<strong>有且只有一个点的入度比出度少1</strong>（作为欧拉路径的起点），<strong>有且只有一个点的入度比出度多1</strong>（作为终点），其余点的入度等于出度。</p>
<h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>与无向图证明类似，一个点进去多少次就要出来多少次。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.chinaunix.net/uid-26380419-id-3164913.html" target="_blank" rel="external">dingchao</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;欧拉环：图中经过&lt;em&gt;每条边一次且仅一次&lt;/em&gt;的&lt;strong&gt;环&lt;/strong&gt;；&lt;br&gt;欧拉路径：图中经过&lt;em&gt;每条边一次且仅
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="欧拉回路" scheme="http://yoursite.com/tags/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>图上的关键点-并查集</title>
    <link href="http://yoursite.com/2017/03/27/%E5%9B%BE%E4%B8%8A%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2017/03/27/图上的关键点-并查集/</id>
    <published>2017-03-27T13:29:32.000Z</published>
    <updated>2017-03-27T14:53:21.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>标题：风险度量</p>
<p>X星系的的防卫体系包含 n 个空间站。这 n 个空间站间有 m 条通信链路，构成通信网。<br>两个空间站间可能直接通信，也可能通过其它空间站中转。</p>
<p>对于两个站点x和y (x != y), 如果能找到一个站点z，使得：<br>当z被破坏后，x和y无法通信，则称z为关于x,y的关键站点。</p>
<p>显然，对于给定的两个站点，关于它们的关键点的个数越多，通信风险越大。</p>
<p>你的任务是：已知网络结构，求两站点之间的通信风险度，即：它们之间的关键点的个数。</p>
<p>输入数据第一行包含2个整数n(2 &lt;= n &lt;= 1000), m(0 &lt;= m &lt;= 2000),分别代表站点数，链路数。<br>空间站的编号从1到n。通信链路用其两端的站点编号表示。<br>接下来m行，每行两个整数 u,v (1 &lt;= u, v &lt;= n; u != v)代表一条链路。<br>最后1行，两个数u,v，代表被询问通信风险度的两个站点。</p>
<p>输出：一个整数，如果询问的两点不连通则输出-1.</p>
<p>例如：<br>用户输入：<br>7 6<br>1 3<br>2 3<br>3 4<br>3 5<br>4 5<br>5 6<br>1 6<br>则程序应该输出：<br>2</p>
</blockquote>
<h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><ol>
<li>最开始检查a, b亮点是否联通，否则，输出 -1 程序结束</li>
<li>从1开始去除每一个点后，使用并查集检查是否在同一个集合中</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> nVer, nEdge;</div><div class="line"><span class="keyword">int</span> edge[<span class="number">2500</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> arr[<span class="number">1500</span>];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFather</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; nVer &gt;&gt; nEdge;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; edge[i][<span class="number">0</span>] &gt;&gt; edge[i][<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start, end;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; start &gt;&gt; end;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nVer; j++)</div><div class="line">    &#123;</div><div class="line">        arr[j] = j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nEdge; j++)</div><div class="line">    &#123;</div><div class="line">        merge(edge[j][<span class="number">0</span>], edge[j][<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(merge(start, end) == <span class="literal">false</span>)</div><div class="line">	&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="comment">//遍历每个去掉的点</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nVer; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//去除需要检查联通的两点，这两点不需要遍历</span></div><div class="line">	    <span class="keyword">if</span>(i == start || i == end)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nVer; j++)</div><div class="line">		&#123;</div><div class="line">			arr[j] = j;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//合并已知点</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nEdge; j++)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//已经去除的点不需要继续合并</span></div><div class="line">			<span class="keyword">if</span>(edge[j][<span class="number">0</span>] == i || edge[j][<span class="number">1</span>] == i)</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			merge(edge[j][<span class="number">0</span>], edge[j][<span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(merge(start, end) == <span class="literal">false</span>)</div><div class="line">		&#123;</div><div class="line">			cnt++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFather</span><span class="params">(<span class="keyword">int</span> node)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(arr[node] == node)</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	node = getFather(arr[node]);</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> t1, <span class="keyword">int</span> t2)</span></span></div><div class="line">&#123;</div><div class="line">	t1 = getFather(t1);</div><div class="line">	t2 = getFather(t2);</div><div class="line">	<span class="keyword">if</span>(t1 == t2)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(t1 &lt; t2)</div><div class="line">		arr[t2] = t1;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		arr[t1] = t2;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;标题：风险度量&lt;/p&gt;
&lt;p&gt;X星系的的防卫体系包含 n 个空间站。这 n 个空间站间有 m 条通信链路，构成通信
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>CantorExpansion</title>
    <link href="http://yoursite.com/2017/03/26/CantorExpansion/"/>
    <id>http://yoursite.com/2017/03/26/CantorExpansion/</id>
    <published>2017-03-26T13:18:06.000Z</published>
    <updated>2017-03-26T13:50:38.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="康托展开"><a href="#康托展开" class="headerlink" title="康托展开"></a>康托展开</h2><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>已知一个字符串， 求其字典序</p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">X=a[n]*(n-1)!+a[n-1]*(n-2)!+...+a[i]*(i-1)!+...+a[1]*0!</div><div class="line">//其中a[i]为当前未出现的元素中是排在第几个（从0开始）。</div></pre></td></tr></table></figure>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>康托展开实际是求在<strong>当前序列之前</strong>有几种字典序<br>对于[D, B, A, C]<br>以D为开头的序列之前必定有以A、 B、 C(<em>字典序比D小</em>)开头的序列，共有<strong>3</strong>种, 每种有<strong>3！</strong>种可能性 所以 <strong>a4 = 3 * 3!</strong><br>以B为开头的序列之前必定有以A(字典序比B小)开头的序列，共有<strong>2</strong>种, 每种有<strong>2！</strong>种可能性 所以 <strong>a3 = 1  * 2!</strong><br>以A为开头的序列之前必定无序列，共有<strong>0</strong>种(因为在子串AC中, 无其他元素比A的字典序更小), 每种有<strong>1！</strong>种可能性 所以 <strong>a2 = 0  * 1!</strong><br>同理<strong> a1 = 0 * 0!</strong></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">\\注意: 因为排列可能数目众多，所以使用<span class="function"><span class="keyword">long</span> <span class="keyword">long</span></span></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">contor</span><span class="params">(<span class="built_in">string</span> &amp; s)</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> loc = <span class="number">0</span>; loc &lt;= s.length() - <span class="number">1</span>; loc++)</div><div class="line">   &#123;</div><div class="line">   		<span class="built_in">string</span> sub = s.substr(loc);</div><div class="line">   		sort(sub.begin(), sub.end());</div><div class="line">   		<span class="keyword">long</span> <span class="keyword">long</span> val = lower_bound(sub.begin(), sub.end(), s[loc]) - sub.begin();</div><div class="line">   		ans = ans + fact(s.length() - <span class="number">1</span> - loc) * val;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="康托逆展开"><a href="#康托逆展开" class="headerlink" title="康托逆展开"></a>康托逆展开</h3><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><pre><code>如何求出ABCD的字典序为20的序列？
</code></pre><p>利用<strong>辗转相除法</strong>即可从字典序逆展开的得到an 到 a1<br><img src="\img\invKT.png" alt="&quot;康托逆展开&quot;"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">invcontor</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> val, <span class="built_in">string</span>&amp; s)</span></span></div><div class="line">&#123;</div><div class="line">   sort(s.begin(), s.end());</div><div class="line">   <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; poly;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i != s.length(); i++)</div><div class="line">   &#123;</div><div class="line">      poly.push_back(val / fact(s.length() - <span class="number">1</span> - i));</div><div class="line">      val = val % (fact(s.length() - <span class="number">1</span> - i));</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">string</span> ans;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; poly.size(); i++)</div><div class="line">   &#123;</div><div class="line">      <span class="comment">//cout &lt;&lt; poly[i] &lt;&lt; endl;</span></div><div class="line">      <span class="comment">//cout &lt;&lt; s &lt;&lt; endl;</span></div><div class="line">      ans = ans + s[poly[i]];</div><div class="line">      s.erase(poly[i], <span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/ZhaoQiling/Algorithm/blob/master/CantorExpansion.cpp" target="_blank" rel="external">github</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/zhongkeli/article/details/6966805" target="_blank" rel="external">zhongkeli的专栏</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;康托展开&quot;&gt;&lt;a href=&quot;#康托展开&quot; class=&quot;headerlink&quot; title=&quot;康托展开&quot;&gt;&lt;/a&gt;康托展开&lt;/h2&gt;&lt;h3 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>printf和scanf的一些用法</title>
    <link href="http://yoursite.com/2017/03/21/printf%E5%92%8Cscanf%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/21/printf和scanf的一些用法/</id>
    <published>2017-03-21T11:50:25.000Z</published>
    <updated>2017-03-21T13:26:29.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="printf-函数"><a href="#printf-函数" class="headerlink" title="printf()函数"></a>printf()函数</h2><blockquote>
<p>%%打印一个百分号<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"%%\n"</span>);</div><div class="line">\\输出结果</div><div class="line">\\%</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="printf-的转换说明修饰符"><a href="#printf-的转换说明修饰符" class="headerlink" title="printf()的转换说明修饰符"></a>printf()的转换说明修饰符</h2><h3 id="数字"><a href="#数字" class="headerlink" title=".数字"></a>.数字</h3><p>%5.2f打印一个浮点数， 字段宽度为5， 其中小数点后有两位<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> per = <span class="number">4.23</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%5.2f\n"</span>, per);</div></pre></td></tr></table></figure></p>
<h3 id=""><a href="#" class="headerlink" title="-"></a>-</h3><p>待打印项向左对齐<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"%-10d"</span>, val);</div></pre></td></tr></table></figure></p>
<h3 id="-1"><a href="#-1" class="headerlink" title="+"></a>+</h3><p>若符号值为正， 则在值前面显示加号; 若为负，则在值前面显示减号<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">printf</span>(<span class="string">"%+5.2f\n"</span>, per);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%+5.2f\n"</span>, <span class="number">-1</span> * per);</div><div class="line">\\output</div><div class="line">\\+<span class="number">4.23</span></div><div class="line">\\<span class="number">-4.23</span></div></pre></td></tr></table></figure></p>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>若符号值为正，则显示前导空格; 若为负，则在值前面显示减号<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">printf</span>(<span class="string">"% 5.2f\n"</span>, per);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"% 5.2f\n"</span>, <span class="number">-1</span> * per);</div><div class="line">\\output</div><div class="line">\\ <span class="number">4.23</span></div><div class="line">\\<span class="number">-4.23</span></div></pre></td></tr></table></figure></p>
<h2 id="printf-的返回值"><a href="#printf-的返回值" class="headerlink" title="printf()的返回值"></a>printf()的返回值</h2><blockquote>
<p>printf()的返回值为打印字符的个数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">int</span> num = <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</div><div class="line">\\output</div><div class="line">\\<span class="number">12</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="scanf-的返回值"><a href="#scanf-的返回值" class="headerlink" title="scanf()的返回值"></a>scanf()的返回值</h2><blockquote>
<p>scanf()函数返回成功读取的项数</p>
</blockquote>
<h2 id="printf-和scanf-的-修饰符"><a href="#printf-和scanf-的-修饰符" class="headerlink" title="printf()和scanf()的*修饰符"></a>printf()和scanf()的*修饰符</h2><h3 id="printf-中的"><a href="#printf-中的" class="headerlink" title="printf()中的*"></a>printf()中的*</h3><blockquote>
<p>用 * 修饰符代替字符宽度</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> per = <span class="number">4.23</span>;</div><div class="line">   <span class="keyword">int</span> width = <span class="number">5</span>;</div><div class="line">   <span class="keyword">int</span> percent = <span class="number">2</span>;</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"%*.*f\n"</span>, width, percent, per);</div></pre></td></tr></table></figure>
<h3 id="scanf-中的"><a href="#scanf-中的" class="headerlink" title="scanf()中的*"></a>scanf()中的*</h3><blockquote>
<p>将 * 放在% 和 转换字符之间会使得scanf()跳过相应的输入项</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%*d%*d%d"</span>, &amp;val);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, val);</div><div class="line">\\input</div><div class="line">\\<span class="number">4</span> <span class="number">5</span> <span class="number">6</span></div><div class="line">\\output</div><div class="line">\\<span class="number">6</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;printf-函数&quot;&gt;&lt;a href=&quot;#printf-函数&quot; class=&quot;headerlink&quot; title=&quot;printf()函数&quot;&gt;&lt;/a&gt;printf()函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;%%打印一个百分号&lt;br&gt;&lt;figure class=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开学一个月总结</title>
    <link href="http://yoursite.com/2017/03/19/%E5%BC%80%E5%AD%A6%E4%B8%80%E4%B8%AA%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/03/19/开学一个月总结/</id>
    <published>2017-03-19T11:55:20.000Z</published>
    <updated>2017-03-19T12:03:02.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="至今没有填上的坑"><a href="#至今没有填上的坑" class="headerlink" title="至今没有填上的坑"></a>至今没有填上的坑</h2><h3 id="动归"><a href="#动归" class="headerlink" title="动归"></a>动归</h3><ul>
<li>完全背包</li>
<li>多重背包 </li>
<li>最长递增子序列(导弹拦截)</li>
</ul>
<h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><ul>
<li>康托展开</li>
</ul>
<h2 id="想要再挖的坑"><a href="#想要再挖的坑" class="headerlink" title="想要再挖的坑"></a>想要再挖的坑</h2><ul>
<li>欧拉回路</li>
<li>二叉树的层序遍历和生成</li>
<li>复习DFS, BFS， 多做几道题</li>
<li>复习最短路</li>
<li>李欣健学长出的DP题</li>
<li>蓝桥的相关资料和视频</li>
<li>蓝桥往届试题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;至今没有填上的坑&quot;&gt;&lt;a href=&quot;#至今没有填上的坑&quot; class=&quot;headerlink&quot; title=&quot;至今没有填上的坑&quot;&gt;&lt;/a&gt;至今没有填上的坑&lt;/h2&gt;&lt;h3 id=&quot;动归&quot;&gt;&lt;a href=&quot;#动归&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="LIFE" scheme="http://yoursite.com/categories/LIFE/"/>
    
    
      <category term="summarize" scheme="http://yoursite.com/tags/summarize/"/>
    
  </entry>
  
  <entry>
    <title>01package</title>
    <link href="http://yoursite.com/2017/03/16/01package/"/>
    <id>http://yoursite.com/2017/03/16/01package/</id>
    <published>2017-03-16T14:04:45.000Z</published>
    <updated>2017-03-16T14:44:44.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目链接: <a href="http://poj.org/?id=3624" target="_blank" rel="external">POJ3624</a><br>很经典的01背包问题，不累述了。</p>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>01背包问题本身代码并不复杂，很难理解的是<strong>状态的转移</strong>，引用Tanky Woo的一句话</p>
<blockquote>
<p>首先说下动态规划，动态规划这东西就和递归一样，只能找局部关系，若想全部列出来，是很难的，比如汉诺塔。你可以说先把除最后一层的其他所有层都移动到2，再把最后一层移动到3，最后再把其余的从2移动到3，这是一个直观的关系，但是想列举出来是很难的，也许当层数n=3时还可以模拟下，再大一些就不可能了，所以，诸如递归，动态规划之类的，不能细想，只能找局部关系。</p>
</blockquote>
<p>使用01背包问题这类简单的问题来学习动态规划是新手友好的。</p>
<p>其次，对于01背包进行<strong>一维数组的优化</strong>，以及和<strong>完全背包问题</strong>及其<strong>一维数组优化</strong>的对比， 能够更好的理解<strong>状态</strong>这个概念。</p>
<h2 id="原始版本"><a href="#原始版本" class="headerlink" title="原始版本"></a>原始版本</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nItem; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nWeight; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//如果不选一件物品有两种可能：</span></div><div class="line">        <span class="comment">//1. 装不下</span></div><div class="line">        <span class="comment">//2. 不想装</span></div><div class="line">        <span class="keyword">if</span>(j &lt; weight[i])</div><div class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//注意此处max函数中dp数组无论拿还是不拿都是从[i - 1]的状态转移而来的</span></div><div class="line">            <span class="comment">//[i - 1]保证此处为01背包问题</span></div><div class="line">            <span class="comment">//即保证每个物品只有一个</span></div><div class="line">            dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用一维数据进行优化"><a href="#使用一维数据进行优化" class="headerlink" title="使用一维数据进行优化"></a>使用一维数据进行优化</h2><p>当nItem比较小(例如在1000以内)时，使用二维数组是可以使用的，但当nItem偏大(n为10000)时， 使用二维数组时不可行的， 所以学会使用一维数组是必须的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nItem; i++)</div><div class="line">  &#123;</div><div class="line"><span class="comment">//此处的j为逆序</span></div><div class="line"><span class="comment">//说明每次计算得出的dp[j]都是从nItem - 1转移(保证每件物品只选一次)而来的</span></div><div class="line"><span class="comment">//完全背包与这个有微小的区别</span></div><div class="line"><span class="comment">//即从nItem转移而来的(每件物品可选任意次)</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = nWeight; j &gt;= <span class="number">1</span>; j--)</div><div class="line">      &#123;</div><div class="line">          <span class="keyword">if</span>(weight[i] &gt; j)</div><div class="line">              <span class="keyword">continue</span>;</div><div class="line">          dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.wutianqi.com/?p=539" target="_blank" rel="external">Tanky Woo’s Blog</a><br><a href="https://github.com/tianyicui/pack" target="_blank" rel="external">DD大牛的背包九讲</a><br><a href="http://www.icst.pku.edu.cn/course/cpp/cpp.htm" target="_blank" rel="external">北大动归相关课件</a></p>
<p>本人文笔略拙，觉得本文晦涩难懂可参考以上大牛的相关文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;题目链接: &lt;a href=&quot;http://poj.org/?id=3624&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>next_permutaion&amp;perv_permutation</title>
    <link href="http://yoursite.com/2017/03/12/next-permutaion-perv-permutation/"/>
    <id>http://yoursite.com/2017/03/12/next-permutaion-perv-permutation/</id>
    <published>2017-03-12T06:21:49.000Z</published>
    <updated>2017-03-12T13:30:37.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">next_permutation</span><span class="params">( iterator start, iterator end )</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>The next_permutation() function attempts to transform the given range of elements [start,end) into the next lexicographically greater permutation of elements. If it succeeds, it returns true, otherwise, it returns false.</p>
<h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><p><a href="https://github.com/ZhaoQiling/CplusplusLearn/blob/master/STL/permutation.cpp" target="_blank" rel="external">github</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CatalanNumber</title>
    <link href="http://yoursite.com/2017/03/12/CatalanNumber/"/>
    <id>http://yoursite.com/2017/03/12/CatalanNumber/</id>
    <published>2017-03-12T03:00:10.000Z</published>
    <updated>2017-03-12T13:24:46.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>令 h(0) = 1, h(1) = 1, catalan数满足<br>h(n)= h(0)&times;h(n-1)+h(1)&times;h(n-2) + … + h(n-1)&times;h(0) (n&gt;=2)</p>
<h2 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h2><p>h(n) =<strong> C(2n, n) / (n + 1)</strong> = <strong>(2n)! / ((n + 1)! &times; n!)</strong></p>
<p>##应用</p>
<h3 id="括号化"><a href="#括号化" class="headerlink" title="括号化"></a>括号化</h3><p>n组括号的<strong>合法运算式</strong>的个数</p>
<blockquote>
<p>如((())) ()(()) ()()() (())() (()())</p>
</blockquote>
<h3 id="出栈次序"><a href="#出栈次序" class="headerlink" title="出栈次序"></a>出栈次序</h3><blockquote>
<p>感觉此应用和括号化类似。<br>省去不表，详情见上篇博文。</p>
</blockquote>
<h3 id="构建二叉树和满二叉树"><a href="#构建二叉树和满二叉树" class="headerlink" title="构建二叉树和满二叉树"></a>构建二叉树和满二叉树</h3><p>h(n)表示<strong>n个节点</strong>构建<strong>二叉树</strong>的方案数<br>h(n)表示<strong>2n + 1个节点</strong>构建**满二叉树的方案数</p>
<h3 id="凸多边形的划分"><a href="#凸多边形的划分" class="headerlink" title="凸多边形的划分"></a>凸多边形的划分</h3><blockquote>
<p>在一个凸多边形中，通过若干条互不相交的对角线，把这个多边形划分成了若干个三角形。任务是键盘上输入凸多边形的边数n，求不同划分的方案数f（n）。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://baike.baidu.com/item/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0?fromtitle=Catalan%E6%95%B0&amp;fromid=7767308&amp;type=syn&amp;sefr=enterbtn" target="_blank" rel="external">百度百科</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0" target="_blank" rel="external">维基百科</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;令 h(0) = 1, h(1) = 1, catalan数满足&lt;br&gt;h(n)= h(0)&amp;times;h(n-1)+h(1)&amp;times
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>出栈顺序</title>
    <link href="http://yoursite.com/2017/03/11/%E5%87%BA%E6%A0%88%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/03/11/出栈顺序/</id>
    <published>2017-03-11T01:46:10.000Z</published>
    <updated>2017-03-12T14:59:39.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们把n个元素的出栈个数的记为f(n), 那么对于1,2,3, 我们很容易得出：</p>
<pre><code>f(1) = 1     //即 1
f(2) = 2     //即 12、21
f(3) = 5     //即 123、132、213、321、231
</code></pre><p>然后我们来考虑f(4), 我们给4个元素编号为a,b,c,d, 那么考虑：元素a只可能出现在1号位置，2号位置，3号位置和4号位置(很容易理解，一共就4个位置，比如abcd,元素a就在1号位置)。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol>
<li>如果元素a在1号位置，那么只可能a进栈，马上出栈，此时还剩元素b、c、d等待操作，就是子问题f(3)；</li>
<li>如果元素a在2号位置，那么一定有一个元素比a先出栈，即有f(1)种可能顺序（只能是b），还剩c、d，即f(2)，根据乘法原理，一共的顺序个数为f(1) * f(2)；</li>
<li>如果元素a在3号位置，那么一定有两个元素比1先出栈，即有f(2)种可能顺序（只能是b、c），还剩d，即f(1)，根据乘法原理，一共的顺序个数为f(2) * f(1)；</li>
<li>如果元素a在4号位置，那么一定是a先进栈，最后出栈，那么元素b、c、d的出栈顺序即是此小问题的解，即         f(3)；</li>
</ol>
<p>结合所有情况，即<figure class="highlight plain"><figcaption><span>= f(3) + f(2) * f(1) + f(1) * f(2) + f(3);```为了规整化，我们定义f(0) = 1；于是f(4)可以重新写为：```f(4) = f(0)*f(3) + f(1)*f(2) + f(2) * f(1) + f(3)*f(0)```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后我们推广到n，推广思路和n=4时完全一样，于是我们可以得到：```f(n) = f(0)*f(n-1) + f(1)*f(n-2) + ... + f(n-1)*f(0)</div></pre></td></tr></table></figure></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>递推式满足Catalan数 <code>h(n) = C(2n, n) / (n + 1)</code></p>
<p>//(n = 0,1,2,…) h(0)=1,h(1)=1</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><code>C(m, n) = m! / (n! * (m - n)!)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;我们把n个元素的出栈个数的记为f(n), 那么对于1,2,3, 我们很容易得出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f(1) =
    
    </summary>
    
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>UVA11388</title>
    <link href="http://yoursite.com/2017/03/11/UVA11388/"/>
    <id>http://yoursite.com/2017/03/11/UVA11388/</id>
    <published>2017-03-11T01:00:31.000Z</published>
    <updated>2017-03-12T05:54:39.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>题目链接 <a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2383" target="_blank" rel="external">Uva11388</a></p>
</blockquote>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>已知两个数的最大公约数(GCD)和最小公倍数(LCM), 求两个数字, 要求第一个数字最小， 第二个数字最大</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">由GCD和LCD的性质得，</div><div class="line">LCM * GCD == a * b,</div><div class="line">a = xG;</div><div class="line">b = yG;</div><div class="line">L / G == x * y;</div><div class="line">若L % G != <span class="number">0</span>; 则说明 x * y 中存在小数 即无解</div><div class="line">若有解， 最小为G 另一个为L</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nTest;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nTest;</div><div class="line">    <span class="keyword">while</span>(nTest)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> G, L;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; G &gt;&gt; L;</div><div class="line">        <span class="keyword">if</span>(L % G != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            nTest--;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; G &lt;&lt; <span class="string">" "</span> &lt;&lt; L &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        nTest--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(b ^= a ^= b ^= a %= b);</div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (a * b) / gcd(a, b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接 &lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=23
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>GCD&amp;LCM</title>
    <link href="http://yoursite.com/2017/03/09/GCD-LCM/"/>
    <id>http://yoursite.com/2017/03/09/GCD-LCM/</id>
    <published>2017-03-09T14:10:59.000Z</published>
    <updated>2017-03-11T00:59:45.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCD最大公约数"><a href="#GCD最大公约数" class="headerlink" title="GCD最大公约数"></a>GCD最大公约数</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>最大公因数，也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。</p>
</blockquote>
<h3 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a,<span class="keyword">unsigned</span> <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(b^=a^=b^=a%=b);<span class="comment">//注意此处分号</span></div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LCM最小公倍数"><a href="#LCM最小公倍数" class="headerlink" title="LCM最小公倍数"></a>LCM最小公倍数</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>几个数共有的倍数叫做这几个数的公倍数，其中除0以外最小的一个公倍数，叫做这几个数的最小公倍数。</p>
</blockquote>
<h3 id="求法-1"><a href="#求法-1" class="headerlink" title="求法"></a>求法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCM</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> temp_lcm;</div><div class="line">	 <span class="comment">//最小公倍数等于两数之积除以最大公约数</span></div><div class="line">	temp_lcm = a * b /GCD(a,b);</div><div class="line">	<span class="keyword">return</span> temp_lcm;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GCD最大公约数&quot;&gt;&lt;a href=&quot;#GCD最大公约数&quot; class=&quot;headerlink&quot; title=&quot;GCD最大公约数&quot;&gt;&lt;/a&gt;GCD最大公约数&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>生物芯片</title>
    <link href="http://yoursite.com/2017/03/09/%E7%94%9F%E7%89%A9%E8%8A%AF%E7%89%87/"/>
    <id>http://yoursite.com/2017/03/09/生物芯片/</id>
    <published>2017-03-09T13:56:06.000Z</published>
    <updated>2017-03-09T14:04:51.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>标题：生物芯片<br>X博士正在研究一种生物芯片，其逻辑密集度、容量都远远高于普通的半导体芯片。<br>博士在芯片中设计了 n 个微型光源，每个光源操作一次就会改变其状态，即：点亮转为关闭，或关闭转为点亮。<br>这些光源的编号从 1 到 n，开始的时候所有光源都是关闭的。<br>博士计划在芯片上执行如下动作：<br>所有编号为2的倍数的光源操作一次，也就是把 2 4 6 8 … 等序号光源打开<br>所有编号为3的倍数的光源操作一次, 也就是对 3 6 9 … 等序号光源操作，注意此时6号光源又关闭了。<br>所有编号为4的倍数的光源操作一次。<br>…..<br>直到编号为 n 的倍数的光源操作一次。<br>X博士想知道：经过这些操作后，某个区间中的哪些光源是点亮的。<br>【输入格式】<br>3个用空格分开的整数：N L R (L&lt;R&lt;N&lt;10^15) N表示光源数，L表示区间的左边界，R表示区间的右边界。<br>【输出格式】<br>输出1个整数，表示经过所有操作后，[L,R] 区间中有多少个光源是点亮的。<br>例如：<br>输入：<br>5 2 3<br>程序应该输出：<br>2<br>再例如：<br>输入：<br>10 3 6<br>程序应该输出：<br>3</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题如果用纯暴力肯定GG，涉及到了2个知识点</p>
<blockquote>
<p>完全平方即用一个整数乘以自己例如1<em>1，2</em>2，3*3等，依此类推。若一个数能表示成某个整数的平方的形式，则称这个数为完全平方数。完全平方数是非负数，而一个完全平方数的根有两个。</p>
<p>一个正整数n是完全平方数的充分必要条件是n有奇数个因数（包括1和n本身）。</p>
</blockquote>
<p>从 <strong>左边界</strong>的二次根号下 枚举 i 直到 i 的平方等于 <strong>右边界</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> nLight, left, right;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nLight &gt;&gt; left &gt;&gt; right;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = right - left + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="built_in">sqrt</span>(left); i * i &lt;= right; i++)</div><div class="line">    &#123;</div><div class="line">		<span class="comment">//此处注意这个if, 若left进行开方运算后可能向下取整， 导致ans多自减1</span></div><div class="line">        <span class="keyword">if</span>(i * i &gt;= left &amp;&amp; i * i &lt;= right)</div><div class="line">            ans--;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;标题：生物芯片&lt;br&gt;X博士正在研究一种生物芯片，其逻辑密集度、容量都远远高于普通的半导体芯片。&lt;br&gt;博士在芯片
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Uva10474 Where is the Marble?</title>
    <link href="http://yoursite.com/2017/02/20/Uva10474-Where-is-the-Marble/"/>
    <id>http://yoursite.com/2017/02/20/Uva10474-Where-is-the-Marble/</id>
    <published>2017-02-20T11:56:20.000Z</published>
    <updated>2017-02-20T12:14:33.774Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接: <a href="https://vjudge.net/problem/UVA-10474" target="_blank" rel="external">Uva10474 Where is the Marble?</a></p>
<h2 id="涉及的知识点"><a href="#涉及的知识点" class="headerlink" title="涉及的知识点"></a>涉及的知识点</h2><ul>
<li>lower_bound</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>典型的水题， lower_bound()返回的是一个有序的非递减数列第一个大于等于查询值的位置。</p>
<p>如果要在</p>
<blockquote>
<p>1, 2, 2, 3, 3, 3, 4, 5, 7</p>
</blockquote>
<p>找寻2, 则返回所在的位置，检查该位置的数值是否为2</p>
<p>找寻6, 返回7所在位置</p>
<h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><p><a href="https://github.com/ZhaoQiling/CplusplusLearn/blob/master/STL/Uva10474.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接: &lt;a href=&quot;https://vjudge.net/problem/UVA-10474&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Uva10474 Where is the Marble?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;涉及的知识点&quot;
    
    </summary>
    
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
      <category term="low_bound" scheme="http://yoursite.com/tags/low-bound/"/>
    
  </entry>
  
  <entry>
    <title>STLPart1</title>
    <link href="http://yoursite.com/2017/02/19/STLPart1/"/>
    <id>http://yoursite.com/2017/02/19/STLPart1/</id>
    <published>2017-02-19T07:15:41.000Z</published>
    <updated>2017-02-18T15:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stringstream及其用法"><a href="#stringstream及其用法" class="headerlink" title="stringstream及其用法"></a>stringstream及其用法</h2><blockquote>
<p>包含在头文件 sstream 中</p>
</blockquote>
<ol>
<li><p>声明stringstream</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stringstream</span> ss;</div></pre></td></tr></table></figure>
</li>
<li><p>给stringstream对象赋值</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可以在定义时赋值</span></div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; s;</div><div class="line"><span class="function">stirngstream <span class="title">ss</span><span class="params">(s)</span></span>;</div><div class="line"><span class="comment">//利用stringstream::str()进行赋值</span></div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line">ss.str(<span class="string">"hello stringstream"</span>);</div><div class="line"><span class="comment">//利用流</span></div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">ss &lt;&lt;　ｓ;</div></pre></td></tr></table></figure>
</li>
<li><p>stringstream的清空</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stringstream ss;</div><div class="line">ss.str(&quot;&quot;);//right</div><div class="line">ss.clear; //error</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="std-lower-bound-和std-lower-bound"><a href="#std-lower-bound-和std-lower-bound" class="headerlink" title="std::lower_bound()和std::lower_bound()"></a>std::lower_bound()和std::lower_bound()</h2><blockquote>
<p>ForwardIter lower_bound(ForwardIter first, ForwardIter last,const _Tp&amp; val)算法返回一个非递减序列[first, last)中的第一个<strong>大于等于</strong>值val的位置。<br>ForwardIter upper_bound(ForwardIter first, ForwardIter last, const _Tp&amp; val)算法返回一个非递减序列[first, last)中第一个<strong>大于</strong>val的位置。</p>
</blockquote>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>4</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>9</th>
<th>9</th>
<th>10</th>
<th>&nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td>first</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>lower_bound(first, last, 4)</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>upper_bound(first, last, 4)</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>last</td>
</tr>
</tbody>
</table>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查找相应的值的位置</span></div><div class="line"><span class="keyword">int</span> loc = lower_bound(first, last, <span class="number">4</span>) - first;</div></pre></td></tr></table></figure>
<h2 id="不定长数组：-vector"><a href="#不定长数组：-vector" class="headerlink" title="不定长数组： vector()"></a>不定长数组： vector()</h2><p>若a是一个vector，可以用a.size( )读取它的大小，a.resize( )改变大小，a.push_back( )向尾部添加元素，a.pop_back( )删除最后一个元素</p>
<h2 id="set-用法"><a href="#set-用法" class="headerlink" title="set()用法"></a>set()用法</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;stringstream及其用法&quot;&gt;&lt;a href=&quot;#stringstream及其用法&quot; class=&quot;headerlink&quot; title=&quot;stringstream及其用法&quot;&gt;&lt;/a&gt;stringstream及其用法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;包
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>内联成员函数</title>
    <link href="http://yoursite.com/2017/02/15/%E5%86%85%E8%81%94%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/02/15/内联成员函数/</id>
    <published>2017-02-15T00:54:09.000Z</published>
    <updated>2017-02-19T10:48:05.071Z</updated>
    
    <content type="html"><![CDATA[<p>##内联成员函数</p>
<ul>
<li>inline + 成员函数</li>
<li>整个函数体出现在类定义内部<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> B&#123;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##内联成员函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline + 成员函数&lt;/li&gt;
&lt;li&gt;整个函数体出现在类定义内部&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>const关键字及使用</title>
    <link href="http://yoursite.com/2017/02/11/const%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/11/const关键字及使用/</id>
    <published>2017-02-11T03:26:39.000Z</published>
    <updated>2017-02-19T10:48:13.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><ul>
<li>const int MAX_VAL = 23;</li>
<li>const string SCHOOL_NAME = “QDU”;</li>
</ul>
<h2 id="定义常量指针"><a href="#定义常量指针" class="headerlink" title="定义常量指针"></a>定义常量指针</h2><blockquote>
<p>不可通过常量指针修改其所指向的内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int n, m;</div><div class="line">const int *p = &amp;n;</div><div class="line">*p = 5;//error</div><div class="line">n = 4; // ok</div><div class="line">p = &amp;m; //ok</div><div class="line">//常量指针可通过强制类型转化 转化为非常量指针</div><div class="line">int * p1 = (int *)p;//ok</div></pre></td></tr></table></figure>
<h2 id="定义常应用"><a href="#定义常应用" class="headerlink" title="定义常应用"></a>定义常应用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = n;</div><div class="line">r = <span class="number">5</span>;</div><div class="line">n = <span class="number">4</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义常量&quot;&gt;&lt;a href=&quot;#定义常量&quot; class=&quot;headerlink&quot; title=&quot;定义常量&quot;&gt;&lt;/a&gt;定义常量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;const int MAX_VAL = 23;&lt;/li&gt;
&lt;li&gt;const string SCHOOL_NAM
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>位运算Part2</title>
    <link href="http://yoursite.com/2017/02/11/%E4%BD%8D%E8%BF%90%E7%AE%97Part2/"/>
    <id>http://yoursite.com/2017/02/11/位运算Part2/</id>
    <published>2017-02-11T00:33:16.000Z</published>
    <updated>2017-02-11T01:25:47.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位运算的简单应用"><a href="#位运算的简单应用" class="headerlink" title="位运算的简单应用"></a>位运算的简单应用</h2><table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">位运算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">去掉最后一位</td>
<td style="text-align:center">(101101-&gt;10110)</td>
<td style="text-align:center">x &gt;&gt; 1</td>
</tr>
<tr>
<td style="text-align:center">在最后加一个 0</td>
<td style="text-align:center">(101101-&gt;1011010)</td>
<td style="text-align:center">x &lt;&lt; 1</td>
</tr>
<tr>
<td style="text-align:center">在最后加一个 1</td>
<td style="text-align:center">(101101-&gt;1011011)</td>
<td style="text-align:center">x &lt;&lt; 1+1</td>
</tr>
<tr>
<td style="text-align:center">把最后一位变成 1</td>
<td style="text-align:center">(101100-&gt;101101)</td>
<td style="text-align:center">x &#166; 1</td>
</tr>
<tr>
<td style="text-align:center">把最后一位变成 0</td>
<td style="text-align:center">(101101-&gt;101100)</td>
<td style="text-align:center">x &#166; 1-1</td>
</tr>
<tr>
<td style="text-align:center">最后一位取反</td>
<td style="text-align:center">(101101-&gt;101100)</td>
<td style="text-align:center">x ^ 1</td>
</tr>
<tr>
<td style="text-align:center">把右数第 k 位变成 1</td>
<td style="text-align:center">(101001-&gt;101101,k=3)</td>
<td style="text-align:center">x &#166; (1 &lt;&lt; (k-1))</td>
</tr>
<tr>
<td style="text-align:center">把右数第 k 位变成 0</td>
<td style="text-align:center">(101101-&gt;101001,k=3)</td>
<td style="text-align:center">x &amp; ! (1 &lt;&lt;(k-1))</td>
</tr>
<tr>
<td style="text-align:center">右数第 k 位取反</td>
<td style="text-align:center">(101001-&gt;101101,k=3)</td>
<td style="text-align:center">x ^ (1 &lt;&lt; (k-1))</td>
</tr>
<tr>
<td style="text-align:center">取末三位</td>
<td style="text-align:center">(1101101-&gt;101)</td>
<td style="text-align:center">x &amp; 7</td>
</tr>
<tr>
<td style="text-align:center">取末 k 位</td>
<td style="text-align:center">(1101101-&gt;1101,k=5)</td>
<td style="text-align:center">x &amp; (1 &lt;&lt; k-1)</td>
</tr>
<tr>
<td style="text-align:center">取右数第 k 位</td>
<td style="text-align:center">(1101101-&gt;1,k=4)</td>
<td style="text-align:center">x &gt;&gt; (k-1) &amp; 1</td>
</tr>
<tr>
<td style="text-align:center">把末 k 位变成 1</td>
<td style="text-align:center">(101001-&gt;101111,k=4)</td>
<td style="text-align:center">x &#166; (1 &lt;&lt; k-1)</td>
</tr>
<tr>
<td style="text-align:center">末 k 位取反</td>
<td style="text-align:center">(101001-&gt;100110,k=4)</td>
<td style="text-align:center">x ^ (1 &lt;&lt; k-1)</td>
</tr>
<tr>
<td style="text-align:center">把右边连续的 1 变成 0</td>
<td style="text-align:center">(100101111-&gt;100100000)</td>
<td style="text-align:center">x &amp; (x+1)</td>
</tr>
<tr>
<td style="text-align:center">把右起第一个 0 变成 1</td>
<td style="text-align:center">(100101111-&gt;100111111)</td>
<td style="text-align:center">x &#166; (x+1)</td>
</tr>
<tr>
<td style="text-align:center">把右边连续的 0 变成 1</td>
<td style="text-align:center">(11011000-&gt;11011111)</td>
<td style="text-align:center">x &#166; (x-1)</td>
</tr>
<tr>
<td style="text-align:center">取右边连续的 1</td>
<td style="text-align:center">(100101111-&gt;1111)</td>
<td style="text-align:center">(x ^ (x+1)) &gt;&gt; 1</td>
</tr>
<tr>
<td style="text-align:center">去掉右起第一个 1 的左边</td>
<td style="text-align:center">(100101000-&gt;1000)</td>
<td style="text-align:center">x &amp; (x ^ (x-1))</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;位运算的简单应用&quot;&gt;&lt;a href=&quot;#位运算的简单应用&quot; class=&quot;headerlink&quot; title=&quot;位运算的简单应用&quot;&gt;&lt;/a&gt;位运算的简单应用&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
  </entry>
  
</feed>
