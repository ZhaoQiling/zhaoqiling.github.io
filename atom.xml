<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhao70&#39;s Blog</title>
  <subtitle>勿在浮沙筑高台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-23T02:40:10.516Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhao70</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ1860 Currency Exchange</title>
    <link href="http://yoursite.com/2017/09/23/POJ1860-Currency-Exchange/"/>
    <id>http://yoursite.com/2017/09/23/POJ1860-Currency-Exchange/</id>
    <published>2017-09-23T02:16:32.000Z</published>
    <updated>2017-09-23T02:40:10.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  <a href="http://poj.org/problem?id=1860" target="_blank" rel="external">POJ1860</a></p>
<p>  给定一个带有点权和边权的图, 求是否存在正权回路.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>  由于Bellman-Ford算法可以求图中是否存在负权回路. 因此可以将 dis数组的初始状态置为 0, 求是否存在正权回路.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    Edge(<span class="keyword">int</span> a_, <span class="keyword">int</span> b_, <span class="keyword">double</span> r_, <span class="keyword">double</span> c_)</div><div class="line">        : a(a_), b(b_), rate(r_), commi(c_)&#123;&#125;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">double</span> rate, commi;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> arrSize = <span class="number">210</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nEdge, nVertex, amoCur;</div><div class="line">    <span class="keyword">double</span> vCur;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nVertex &gt;&gt; nEdge &gt;&gt; amoCur &gt;&gt; vCur;</div><div class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edge;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class="line">        <span class="keyword">double</span> r, c;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</div><div class="line">        edge.push_back(Edge(a, b, r, c));</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</div><div class="line">        edge.push_back(Edge(b, a, r, c));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> dis[arrSize];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge * <span class="number">2</span>; i++)</div><div class="line">        dis[i] = <span class="number">0</span>;</div><div class="line">    dis[amoCur] = vCur;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nVertex; i++)&#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; edge.size(); j++)&#123;</div><div class="line">            <span class="keyword">if</span>(dis[edge[j].b] &lt; (dis[edge[j].a] - edge[j].commi) * edge[j].rate)&#123;</div><div class="line">                dis[edge[j].b] = (dis[edge[j].a] - edge[j].commi) * edge[j].rate;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(i == nVertex)&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;http://poj.org/problem?id=1860&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Bellman-Ford" scheme="http://yoursite.com/tags/Bellman-Ford/"/>
    
      <category term="Bellman-Ford变形" scheme="http://yoursite.com/tags/Bellman-Ford%E5%8F%98%E5%BD%A2/"/>
    
      <category term="正权回路" scheme="http://yoursite.com/tags/%E6%AD%A3%E6%9D%83%E5%9B%9E%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>About DEATH</title>
    <link href="http://yoursite.com/2017/09/22/About-DEATH/"/>
    <id>http://yoursite.com/2017/09/22/About-DEATH/</id>
    <published>2017-09-22T12:40:57.000Z</published>
    <updated>2017-09-22T12:42:40.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>若无牵无挂, 我宁愿迎接的是死亡, 而非自由. ​​​​</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;若无牵无挂, 我宁愿迎接的是死亡, 而非自由. ​​​​&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POJ2253 Frogger</title>
    <link href="http://yoursite.com/2017/09/21/POJ2253/"/>
    <id>http://yoursite.com/2017/09/21/POJ2253/</id>
    <published>2017-09-21T01:14:58.000Z</published>
    <updated>2017-09-21T09:47:04.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="http://poj.org/problem?id=2253" target="_blank" rel="external">POJ2253 Frogger</a></p>
<p>  图中的一个点到另一个点, 每条路径都有一个最大的跳跃长度, 求所有路径的最大跳跃长度当中最小值.</p>
<h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><p>  其实是考察最短路算法(Dijkstra, Floyd等)的变形, Dijkstra 和 Floyd 算法通常用来求最短路, 但其实只要改变边的<strong>松弛条件</strong>, 存储边的数组的含义便会发生改变, 比如<strong>PAT1003</strong>1(使用Dijkstra可以求<strong>带点权图</strong>的最短路).</p>
<h2 id="使用Dijkstra"><a href="#使用Dijkstra" class="headerlink" title="使用Dijkstra"></a>使用Dijkstra</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>  根据题目要求, dis数组的含义变为<em>从一个点出发, 到其他点的最长路径中的最小值</em>, 因此, dis的松弛条件变为 <strong>dis[v] = min(dis[v], max(dis[u], edge[u][v]))</strong>, 所以说用Dijkstra的变形的时候一定要考虑<strong>不同的松弛条件, dis数组的含义是不同的</strong></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">mina</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a &lt; b ? a : b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</div><div class="line"><span class="keyword">struct</span> Point&#123;</div><div class="line">  <span class="keyword">int</span> x, y;</div><div class="line">&#125;arr[maxn];</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDis</span><span class="params">(Point a, Point b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x  - b.x) + (a.y - b.y) * (a.y - b.y));</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> edge[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> nC)</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> dis[maxn];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nC; ++i)&#123;</div><div class="line">    dis[i] = edge[<span class="number">0</span>][i];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">bool</span> isVis[maxn];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nC; ++i)</div><div class="line">    isVis[i] = <span class="literal">false</span>;</div><div class="line">  isVis[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nC; ++i)&#123;</div><div class="line">    <span class="keyword">int</span> u;</div><div class="line">    <span class="keyword">double</span> min = <span class="number">99999</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nC; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(isVis[j])</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">if</span>(dis[j] &lt; min)&#123;</div><div class="line">        min = dis[j];</div><div class="line">        u = j;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    isVis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; nC; ++v)&#123;</div><div class="line">      dis[v] = mina(dis[v], max(dis[u], edge[u][v]));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> dis[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> nCase;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; nCase &amp;&amp; nCase != <span class="number">0</span>)&#123;</div><div class="line">    t++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">      <span class="built_in">cin</span> &gt;&gt; arr[i].x &gt;&gt; arr[i].y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxn; j++)</div><div class="line">        edge[i][j] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nCase; j++)&#123;</div><div class="line">        edge[i][j] = edge[j][i] = getDis(arr[i], arr[j]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// for(int i = 0; i &lt; nCase; i++)&#123;</span></div><div class="line">    <span class="comment">//   for(int j = 0; j &lt; nCase; j++)</span></div><div class="line">    <span class="comment">//     cout &lt;&lt; edge[i][j] &lt;&lt; " ";</span></div><div class="line">    <span class="comment">//   cout &lt;&lt; endl;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Scenario #"</span> &lt;&lt; t &lt;&lt; <span class="string">"\nFrog Distance = "</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt; dijkstra(nCase) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用Floyd"><a href="#使用Floyd" class="headerlink" title="使用Floyd"></a>使用Floyd</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>  同理, 根据题目要求, Floyed中的edge数组, 代表<em>不同两点之间最长路径的最小值</em>. 因此, 松弛条件为 <strong>edge[i][j] = min(edge[i][j], max(edge[i][k], edge[k][j]));</strong></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> Point&#123;</div><div class="line">  <span class="keyword">int</span> x, y;</div><div class="line">&#125;;</div><div class="line">Point arr[<span class="number">210</span>];</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDis</span><span class="params">(Point a, Point b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> edge[<span class="number">210</span>][<span class="number">210</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> nCase = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; nCase &amp;&amp; nCase != <span class="number">0</span>)&#123;</div><div class="line">    t++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i].x &gt;&gt; arr[i].y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nCase; j++)&#123;</div><div class="line">        edge[i][j] = edge[j][i] = getDis(arr[i], arr[j]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; nCase; k++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCase; j++)&#123;</div><div class="line">          edge[i][j] = min(edge[i][j], max(edge[i][k], edge[k][j]));</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Scenario #"</span> &lt;&lt; t &lt;&lt; <span class="string">"\nFrog Distance = "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt;edge[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  在进行最短路变形问题求解的时候, 一定要搞明白松弛条件和数组的含义, 松弛条件不同, 数组的含义也不同.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2253&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Dijkstra" scheme="http://yoursite.com/tags/Dijkstra/"/>
    
      <category term="Dijkstra变形" scheme="http://yoursite.com/tags/Dijkstra%E5%8F%98%E5%BD%A2/"/>
    
      <category term="Floyd" scheme="http://yoursite.com/tags/Floyd/"/>
    
      <category term="Floyd变形" scheme="http://yoursite.com/tags/Floyd%E5%8F%98%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>POJ1426 Find The Multiple</title>
    <link href="http://yoursite.com/2017/09/14/POJ1426-Find-The-Multiple/"/>
    <id>http://yoursite.com/2017/09/14/POJ1426-Find-The-Multiple/</id>
    <published>2017-09-14T03:24:19.000Z</published>
    <updated>2017-09-23T02:22:36.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  给定一个数字 n, 求 n 的一个倍数 m. m 的要求是一个只由 0 和 1 构成的十进制数字.</p>
<h2 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h2><p>  对于一个 m 第一位肯定为 1, 剩下的每一位有 0 和 1 两种情况, 如果进行穷举, 数会变得很大. 因此, 需要运用同余模定理, 减少中间数字规模.</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">（a*b）%n = （a%n *b%n）%n</div><div class="line">（a+b）%n = （a%n +b%n）%n</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxV = <span class="number">999999</span>;</div><div class="line"><span class="keyword">int</span> m[maxV];</div><div class="line"><span class="keyword">int</span> rec[maxV];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; val &amp;&amp; val) &#123;</div><div class="line">		<span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="keyword">sizeof</span>(m));</div><div class="line">		m[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span> (i = <span class="number">2</span>; m[i - <span class="number">1</span>] != <span class="number">0</span>; i++) &#123;</div><div class="line">			m[i] = (m[i / <span class="number">2</span>] * <span class="number">10</span> + i % <span class="number">2</span>) % val;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">		i--;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (i) &#123;</div><div class="line">			rec[len++] = i % <span class="number">2</span>;</div><div class="line">			i /= <span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">        <span class="keyword">while</span>(len)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; rec[--len];</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/lyy289065406/article/details/6647917" target="_blank" rel="external">POJ1426-Find The Multiple</a><br><a href="http://www.cnblogs.com/crazyapple/archive/2013/06/03/3116169.html" target="_blank" rel="external">poj 1426 Find The Multiple搜索BFS的思想+ 同余模定理+二叉树+01哈夫曼编码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  给定一个数字 n, 求 n 的一个倍数 m. m 的要求是一个只由 0 和 1 构成的十进制数字.&lt;/p&gt;
&lt;h2 id
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="同余模定理" scheme="http://yoursite.com/tags/%E5%90%8C%E4%BD%99%E6%A8%A1%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ3279 Fliptile</title>
    <link href="http://yoursite.com/2017/09/14/POJ3279-Fliptile/"/>
    <id>http://yoursite.com/2017/09/14/POJ3279-Fliptile/</id>
    <published>2017-09-14T00:37:51.000Z</published>
    <updated>2017-09-14T00:52:25.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  给定一个矩阵， 其中有 0 和 1. 每次旋转可以将 0 变为 1, 将 1 变为 0. 但每次旋转一个方块时, 所有邻接的方块都会被旋转, 求字典序最小的旋转方式.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>  若给定第一行的旋转排列, 便可以得到整个矩阵的旋转方式. 矩阵最大为15 × 15 的标准, 因此可以使用状态压缩第一行, 求出剩下行数的旋转次数与方式, 并进行保存.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">20</span>;</div><div class="line"><span class="keyword">int</span> nRow, nCol;</div><div class="line"><span class="keyword">int</span> tile[MAX][MAX];</div><div class="line"><span class="keyword">int</span> flip[MAX][MAX];</div><div class="line"><span class="keyword">int</span> opt[MAX][MAX];</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getColor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> cnt = tile[x][y];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> x1 = x + d[i][<span class="number">0</span>];</div><div class="line">		<span class="keyword">int</span> y1 = y + d[i][<span class="number">1</span>];</div><div class="line">		<span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; nRow &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; nCol)</div><div class="line">			cnt += flip[x1][y1];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cnt % <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cntF</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (getColor(i, j) == <span class="number">1</span>) &#123;</div><div class="line">				flip[i + <span class="number">1</span>][j] = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;</div><div class="line">		<span class="keyword">if</span> (getColor(nRow - <span class="number">1</span>, j) == <span class="number">1</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;</div><div class="line">			cnt += flip[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; nCol); ++i) &#123;</div><div class="line">		<span class="built_in">memset</span>(flip, <span class="number">0</span>, <span class="keyword">sizeof</span>(flip));</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; ++j) &#123;</div><div class="line">			flip[<span class="number">0</span>][nCol - <span class="number">1</span> - j] = (i &gt;&gt; j) &amp; <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> temp = cntF();</div><div class="line">		<span class="keyword">if</span> ((temp &gt;= <span class="number">0</span>) &amp;&amp; (res == <span class="number">-1</span> || res &gt; temp)) &#123;</div><div class="line">			res = temp;</div><div class="line">			<span class="built_in">memcpy</span>(opt, flip, <span class="keyword">sizeof</span>(flip));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; nRow &gt;&gt; nCol;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++)</div><div class="line">			<span class="built_in">cin</span> &gt;&gt; tile[i][j];</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (solve() == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; ++i)</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; ++j)</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, opt[i][j], j == nCol - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>); </div><div class="line">	&#125;</div><div class="line"><span class="comment">//	system("pause");</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  给定一个矩阵， 其中有 0 和 1. 每次旋转可以将 0 变为 1, 将 1 变为 0. 但每次旋转一个方块时, 所有邻
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="状态压缩" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>I AM BACK</title>
    <link href="http://yoursite.com/2017/09/14/I-AM-BACK/"/>
    <id>http://yoursite.com/2017/09/14/I-AM-BACK/</id>
    <published>2017-09-14T00:35:36.000Z</published>
    <updated>2017-09-14T00:35:36.646Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pop Sequence</title>
    <link href="http://yoursite.com/2017/07/21/Pop-Sequence/"/>
    <id>http://yoursite.com/2017/07/21/Pop-Sequence/</id>
    <published>2017-07-21T13:10:53.000Z</published>
    <updated>2017-07-21T13:22:02.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定栈的大小m， 序列长度n， 和测试数据的个数k<br>每一组序列的入栈顺序都为 1 - n, 求每组出栈顺序能否成立。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于每一组序列， <strong>入栈次序都为 1 - n</strong>， 而<strong>出栈次序已经给出</strong>， 我们只需要一次入栈， 当栈顶元素为序列中的一个元素时即出栈， 模拟看是否能够实现。<br>设置cur变量指向序列中元素， <strong>循环进行1 - n的压栈操作</strong>， 当遇到cur指向的元素与栈顶元素相等即出栈， 直至不相等。 </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sizeOfStack, lenSeq, nSeq;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; sizeOfStack &gt;&gt; lenSeq &gt;&gt; nSeq;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; nSeq; k++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seq(lenSeq + <span class="number">1</span>);</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenSeq; i++)</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; seq[i];</div><div class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenSeq; i++)</div><div class="line">        &#123;</div><div class="line">            st.push(i);</div><div class="line">            <span class="keyword">if</span>(st.size() &gt; sizeOfStack)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">while</span>(st.empty() == <span class="literal">false</span> &amp;&amp; seq[cur] == st.top() )</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//cout &lt;&lt; st.top();</span></div><div class="line">                st.pop();</div><div class="line">                cur++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(cur == lenSeq + <span class="number">1</span>)</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span>    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定栈的大小m， 序列长度n， 和测试数据的个数k&lt;br&gt;每一组序列的入栈顺序都为 1 - n, 求每组出栈顺序能否成立。&lt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="PAT_Advanced" scheme="http://yoursite.com/tags/PAT-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>infixToSuffixExpresion</title>
    <link href="http://yoursite.com/2017/07/21/infixToSuffixExpresion/"/>
    <id>http://yoursite.com/2017/07/21/infixToSuffixExpresion/</id>
    <published>2017-07-21T12:18:11.000Z</published>
    <updated>2017-07-21T12:56:05.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将中缀表达式读入字符串, 不断读入字符。<br>若字符为<strong>数字</strong>, 则<em>直接打印</em>。<br>若字符为<strong>运算符</strong>, 若栈顶元素运算的优先级高于读入的运算符的优先级， 则弹出栈顶元素， 压栈读入的运算符。<br>需要特殊说明的是<strong>括号</strong>的优先级, <strong>左括号</strong>在<strong>压栈之前</strong>的优先级最高(括号的读取不能使任何之前的运算符进行出栈操作, 即所有操作都要等待括号的运算完成)， <strong>在栈中</strong>优先级最低（在括号中, 括号的存在不能影响任何括号内的运算）。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">infixToSuffixExpresion</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// (的优先级在栈中最低， 但没必要另建一个表</span></div><div class="line">		HashMap&lt;Character, Integer&gt; priorty = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line">		priorty.put(<span class="string">'('</span>, <span class="number">0</span>);</div><div class="line">		priorty.put(<span class="string">'+'</span>, <span class="number">1</span>); </div><div class="line">		priorty.put(<span class="string">'-'</span>, <span class="number">1</span>); </div><div class="line">		priorty.put(<span class="string">'*'</span>, <span class="number">2</span>); </div><div class="line">		priorty.put(<span class="string">'/'</span>, <span class="number">2</span>); </div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		String infix = in.next();</div><div class="line">		StringBuilder ans = <span class="keyword">new</span> StringBuilder();</div><div class="line">		Stack&lt;Character&gt; oper = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; infix.length(); ++i)</div><div class="line">		&#123;</div><div class="line">			Character c = infix.charAt(i);</div><div class="line">			<span class="keyword">if</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</div><div class="line">			&#123;</div><div class="line">				ans.append(c);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">true</span> == oper.isEmpty())</div><div class="line">			&#123;</div><div class="line">				oper.push(c);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(c == <span class="string">'('</span>)</div><div class="line">			&#123;</div><div class="line">				oper.push(c);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">')'</span> == c)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">while</span>(oper.peek() != <span class="string">'('</span>)</div><div class="line">				&#123;</div><div class="line">					ans.append(oper.peek());</div><div class="line">					oper.pop();</div><div class="line">				&#125;</div><div class="line">				oper.pop();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(priorty.get(oper.peek()) &gt;= priorty.get(c))</div><div class="line">			&#123;</div><div class="line">				ans.append(oper.peek());</div><div class="line">				oper.pop();</div><div class="line">				oper.push(c);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(priorty.get(oper.peek()) &lt; priorty.get(c))</div><div class="line">			&#123;</div><div class="line">				oper.push(c);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(oper.empty() == <span class="keyword">false</span>)</div><div class="line">		&#123;</div><div class="line">			ans.append(oper.peek());</div><div class="line">			oper.pop();</div><div class="line">		&#125;</div><div class="line">		System.out.println(ans);</div><div class="line">		<span class="comment">//System.out.println(oper.toString());</span></div><div class="line">		in.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中缀表达式转后缀表达式&quot;&gt;&lt;a href=&quot;#中缀表达式转后缀表达式&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转后缀表达式&quot;&gt;&lt;/a&gt;中缀表达式转后缀表达式&lt;/h2&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;head
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>秦九韶算法</title>
    <link href="http://yoursite.com/2017/07/21/%E7%A7%A6%E4%B9%9D%E9%9F%B6%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/07/21/秦九韶算法/</id>
    <published>2017-07-21T11:39:09.000Z</published>
    <updated>2017-07-21T12:10:18.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当处理一个多项式在 x = x0 处的值的时候, 不断地对求 x^n 是低效的。 尤其是当n很大的时候, pow(x, n)在多项式系数的循环当中将整个算法的复杂度变为O(n^2). </p>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p><img src="\img\Qinjiuzhao.png" alt="&quot;秦九韶算法&quot;"></p>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(n + <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; x;</div><div class="line">    <span class="keyword">int</span> ans = arr[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">    &#123;</div><div class="line">        ans = ans * x + arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QinJiuZhaoAlgorithm</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		<span class="keyword">int</span> nNum = in.nextInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nNum; i++)</div><div class="line">		&#123;</div><div class="line">			arr.add(in.nextInt());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> x = in.nextInt();</div><div class="line">		<span class="keyword">int</span> ans = arr.get(arr.size() - <span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = arr.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">		&#123;</div><div class="line">			ans = arr.get(i) + x * ans;</div><div class="line">		&#125;</div><div class="line">		System.out.println(ans);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;当处理一个多项式在 x = x0 处的值的时候, 不断地对求 x^n 是低效的。 尤其是当n很大的时候, pow(x, n)在多项式系数的循
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>HDU1584</title>
    <link href="http://yoursite.com/2017/05/08/HDU1584/"/>
    <id>http://yoursite.com/2017/05/08/HDU1584/</id>
    <published>2017-05-08T12:27:20.000Z</published>
    <updated>2017-05-08T13:08:21.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定<strong>值为1到10</strong>的纸牌的顺序，每张牌只能放在<strong>大一</strong>的纸牌上，每次移动的<strong>代价</strong>为<strong>两张牌的差值的绝对值</strong>， 求最小代价。</p>
<h2 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h2><p>在<strong>不改变</strong>数组排列顺序的前提下<strong>生成全排列</strong>的题，当然还要带上<strong>剪枝</strong>和<strong>关于回溯的判断</strong>， 真的是考察dfs的好题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> loc[<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> isUsed[<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">int</span> temp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//剪枝. 无论何时, 只要当前步数大于已知的ans(最大值), 就进行回溯</span></div><div class="line">    <span class="keyword">if</span>(ans &lt; temp)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//由于值为10的牌的特殊性, 不需要进行移动, 所以步数为9步即可得出结论</span></div><div class="line">    <span class="keyword">if</span>(step == <span class="number">9</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(ans &gt;= temp)</div><div class="line">            ans = temp;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//选择进行九张牌的移动, 移动九次</span></div><div class="line">    <span class="comment">//在第几层递归, 此循环就选择i当作, 该层的一个子树的根节点</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(isUsed[i])</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="comment">//选择移动到第几张牌的下面</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//比如要移1了，如果2,3,4,5都已经被移动过了 那么这几张牌必定叠放在6的下面，所以要移到6的位置</span></div><div class="line">            <span class="keyword">if</span>(isUsed[j])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            isUsed[i] = <span class="literal">true</span>;</div><div class="line">            dfs(step + <span class="number">1</span>, temp + <span class="built_in">abs</span>(loc[i] - loc[j]));</div><div class="line">            isUsed[i] = <span class="literal">false</span>;</div><div class="line">            <span class="comment">//注意不要再这个地方回溯 如果回溯了 就像是又一个全排列 而且牌得移动不合理，比如2移到6了，结果回溯就直接跳过3~6到了7的下面(比如: temp的值比ans更大, 但说不定2 -&gt; 6的移动是合法的, 但之后存在不合法的移动)</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nTest;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nTest;</div><div class="line">    <span class="keyword">while</span>(nTest--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> val;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; val;</div><div class="line">            <span class="comment">//怎么存储数据也是有讲究的</span></div><div class="line">            loc[val] = i;</div><div class="line">            isUsed[i] = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        ans = <span class="number">9999999</span>;</div><div class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/flynn_curry/article/details/50775604" target="_blank" rel="external">hdu1584 蜘蛛牌（经典dfs）</a><br><a href="http://www.cnblogs.com/sook/archive/2011/03/27/1996775.html" target="_blank" rel="external">hdu 1584 蜘蛛牌</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定&lt;strong&gt;值为1到10&lt;/strong&gt;的纸牌的顺序，每张牌只能放在&lt;strong&gt;大一&lt;/strong&gt;的纸牌上
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="好题" scheme="http://yoursite.com/tags/%E5%A5%BD%E9%A2%98/"/>
    
      <category term="剪枝" scheme="http://yoursite.com/tags/%E5%89%AA%E6%9E%9D/"/>
    
  </entry>
  
  <entry>
    <title>HDU1097</title>
    <link href="http://yoursite.com/2017/05/03/HDU1097-A-hard-puzzle/"/>
    <id>http://yoursite.com/2017/05/03/HDU1097-A-hard-puzzle/</id>
    <published>2017-05-03T12:23:48.000Z</published>
    <updated>2017-05-03T12:33:49.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><blockquote>
<p>给定a, b求 a ^ b的个位数字.<br>(0&lt;a,b&lt;=2^30)</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题肯定是使用快速幂取模解题。<br>但是如果直接<strong>quickMod(a, b, c)</strong>肯定会<strong>爆掉</strong>，因为a最大值2 ^ 30在<strong>进入函数平方</strong>后， 会超出int数据类型， 所以应该<strong>quickMod(a % c, b, c)</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">quickMod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b % <span class="number">2</span>)</div><div class="line">            ans = (ans * a) % c;</div><div class="line">        a = (a * a) % c;</div><div class="line">        b /= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, quickMod(a % <span class="number">10</span>, b, <span class="number">10</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1097" target="_blank" rel="external">HDU1097</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定a, b求 a ^ b的个位数字.&lt;br&gt;(0&amp;lt;a,b&amp;lt;=2^30)&lt;/p&gt;
&lt;/
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
      <category term="快速幂取模" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>快速幂取模</title>
    <link href="http://yoursite.com/2017/05/03/%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/"/>
    <id>http://yoursite.com/2017/05/03/快速幂取模/</id>
    <published>2017-05-03T11:59:20.000Z</published>
    <updated>2017-05-03T12:21:50.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><p><img src="/img/quickMod.png" alt="quickMod"></p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>以 b 为偶数举例<br>a^b%c = ((a^2)^b/2)%c</p>
<p>若 b / 2仍为偶数， 那么<br>((a^2)^b/2)%c = (((a^2)^2)^(b/2)/2)%c</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> ^ <span class="number">16</span></div><div class="line">= (<span class="number">3</span>     * <span class="number">3</span>    ) ^ <span class="number">8</span></div><div class="line">= (<span class="number">3</span> ^ <span class="number">2</span> * <span class="number">3</span> ^ <span class="number">2</span>) ^ <span class="number">4</span> <span class="comment">//3^2 由上一步3 * 3得</span></div><div class="line">= (<span class="number">3</span> ^ <span class="number">4</span> * <span class="number">3</span> ^ <span class="number">4</span>) ^ <span class="number">2</span> <span class="comment">//3^4 由上一步3 ^ 2 * 3 ^ 2得</span></div><div class="line">= (<span class="number">3</span> ^ <span class="number">8</span> * <span class="number">3</span> ^ <span class="number">8</span>) ^ <span class="number">1</span> <span class="comment">//3^8 由上一步3 ^ 4 * 3 ^ 4得</span></div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQuickPow1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            ans = ans * a;</div><div class="line">        a = a * a;</div><div class="line">        b = b / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以取模<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQuickMod1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            ans = (ans * a) % c;</div><div class="line">        a = (a * a) % c;</div><div class="line">        b = b / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/u013174702/article/details/43761197" target="_blank" rel="external">快速幂取余算法总结详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速幂&quot;&gt;&lt;a href=&quot;#快速幂&quot; class=&quot;headerlink&quot; title=&quot;快速幂&quot;&gt;&lt;/a&gt;快速幂&lt;/h2&gt;&lt;h3 id=&quot;基本公式&quot;&gt;&lt;a href=&quot;#基本公式&quot; class=&quot;headerlink&quot; title=&quot;基本公式&quot;&gt;&lt;/a&gt;基本公
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
      <category term="快速幂" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>linear_equation</title>
    <link href="http://yoursite.com/2017/04/29/linear-equation/"/>
    <id>http://yoursite.com/2017/04/29/linear-equation/</id>
    <published>2017-04-29T03:32:42.000Z</published>
    <updated>2017-04-29T03:35:29.474Z</updated>
    
    <content type="html"><![CDATA[<p>看了半天各种大手子解析， 也许是数学基础不好吧，熟练背诵吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        x = <span class="number">1</span>;</div><div class="line">        y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> r = exgcd(b, a % b, x, y);</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    x = y;</div><div class="line">    y = t - (a / b) * y;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">linear_equation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> d = exgcd(a, b, x, y);</div><div class="line">    <span class="keyword">if</span>(c % d)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> k = c / d;</div><div class="line">    x *= k; y *= k;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">if</span>(linear_equation(<span class="number">47</span>, <span class="number">30</span>, <span class="number">1</span>, x, y))</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了半天各种大手子解析， 也许是数学基础不好吧，熟练背诵吧。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="gcd" scheme="http://yoursite.com/tags/gcd/"/>
    
      <category term="exgcd" scheme="http://yoursite.com/tags/exgcd/"/>
    
      <category term="linear_equation" scheme="http://yoursite.com/tags/linear-equation/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://yoursite.com/2017/04/23/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/23/KMP算法/</id>
    <published>2017-04-23T11:02:06.000Z</published>
    <updated>2017-04-23T13:24:21.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  想KMP这个算法的时间， 前前后后加起来能有48个小时吧。 学这种算法还是画画图实在啊， 空想是没有用的~</p>
<h2 id="kmpSearch"><a href="#kmpSearch" class="headerlink" title="kmpSearch"></a>kmpSearch</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmpSearch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">const</span> <span class="built_in">string</span> &amp;p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sLen = s.length();</div><div class="line">    <span class="keyword">int</span> pLen = p.length();</div><div class="line">    <span class="keyword">while</span>(i &lt; sLen &amp;&amp; j &lt; pLen)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == p[j])</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            j = next[j];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(j == pLen)</div><div class="line">        <span class="keyword">return</span> i - j;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h3><p>  对于kmpSearch这个函数来讲， 思路是不难理解的。 不过此 i，j 的<strong>变化</strong>和<strong>边界</strong>是需要特别注意的。</p>
<ol>
<li>可以将 i, j 理解为<strong>指针</strong>， 所谓的-1即为<strong>空指针</strong>。</li>
<li>当 j 的值为 -1 时， 说明 p 中已经<em>没有可以匹配的前缀了</em>。 所以 i, j分别自增 1。 i 指向下一个 s 中的字符。 j 指向 p[0].</li>
<li><p>跳出while循环的可能性:</p>
<ol>
<li>i 遍历 s 中所有元素</li>
<li>j 遍历 p 中所有元素</li>
</ol>
<p>只有第 2 种情况说明字符串完全匹配。 返回值 i 中找到的字符串结尾 减去 字符串 p 的长度(即 j)。</p>
</li>
</ol>
<h2 id="getNextVal"><a href="#getNextVal" class="headerlink" title="getNextVal"></a>getNextVal</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNextVal</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;p)</span></span></div><div class="line">&#123;</div><div class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pLen = p.length();</div><div class="line">    <span class="keyword">while</span>(j &lt; pLen - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span> || p[k] == p[j])</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">            k++;</div><div class="line">            next[j] = k;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            k = next[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="讲解-1"><a href="#讲解-1" class="headerlink" title="讲解"></a>讲解</h3><p>  next数组可是kmp算法的精华啊， 最开始看next数组生成过程的时候，有一种很玄学的感觉。。。</p>
<p>  next数组的含义</p>
<blockquote>
<p>代表当前字符之前的字符串中，有多大长度的相同前缀后缀。<br>例如 如果next [j] = k，代表j 之前的字符串中有最大长度为k 的相同前缀后缀。</p>
</blockquote>
<ol>
<li>k, j分别是指向相同前后缀最后一个字符的指针。 </li>
<li>当 p[k] == p[j] 时，k，j 自增一。 因为 k 为指向前缀的指针， 即为前缀的长度， k 的大小即最长相同前后缀的长度</li>
<li>因为 j 的取值范围为[0, pLen - 1] 但 next 数组的含义为 “代表<strong>当前字符之前</strong>的字符串中，有多大长度的相同前缀后缀”, 所以判断到 p[plen - 2]的字符 即可得到 next[pLen - 1]的值。</li>
<li>题目中的 i, j 为先判断后更新 next 的值， 保证了 3 的成立。</li>
<li>当p[k] != p[j]时, 便寻找更小的后缀 k = next[k]<br>第五条我想了整整一下午， <blockquote>
<p>举个例子<br>前缀1 和 后缀1 相同<br>前缀1 包括相同的 前缀a 和 后缀b<br>后缀2 包括相同的 前缀c 和 后缀d<br>因为 1 == 2<br>所以 a == b == c == d<br>所以可以放弃 1 + p[k] 与 2 + p[j]<br>来更新 a + p[k] (k = next[k]) 和 d + p[j] (j值未变)</p>
</blockquote>
</li>
</ol>
<h2 id="next数组优化"><a href="#next数组优化" class="headerlink" title="next数组优化"></a>next数组优化</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNextVal</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;p)</span></span></div><div class="line">&#123;</div><div class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pLen = p.length();</div><div class="line">    <span class="keyword">while</span>(j &lt; pLen - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span> || p[k] == p[j])</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">            k++;</div><div class="line">            <span class="keyword">if</span>(p[k] != p[j])</div><div class="line">                next[j] = k;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                next[j] = next[k];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            k = next[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="讲解-2"><a href="#讲解-2" class="headerlink" title="讲解"></a>讲解</h3><p>  当<strong>p[j] == p[next[j]]</strong>时， 匹配是无效的。 所以不能允许p[j] == p[next[j]]。如果出现了p[j] == p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令<strong>next[j] = next[next[j]]</strong>。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>关于 KMP 算法，july的博客中的关于KMP的置顶文章绝对是我目前为止见过的最好的文章了， 通俗易懂， 深入浅出。 比其他文章不知道高到哪里去了。</p>
<p><a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="external">从头到尾彻底理解KMP（2014年8月22日版）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;  想KMP这个算法的时间， 前前后后加起来能有48个小时吧。 学这种算法还是画画图实在啊， 空想是没有用的~&lt;/p&gt;
&lt;h2 id=&quot;km
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="KMP" scheme="http://yoursite.com/tags/KMP/"/>
    
      <category term="字符串匹配" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>动归解决取球问题</title>
    <link href="http://yoursite.com/2017/03/29/%E5%8A%A8%E5%BD%92%E8%A7%A3%E5%86%B3%E5%8F%96%E7%90%83%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/29/动归解决取球问题/</id>
    <published>2017-03-29T13:53:55.000Z</published>
    <updated>2017-03-29T14:25:56.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p> 现在有n个小球，每次从盒子中取出的小球数目必须是1, 3, 7, 8个, 不可弃权, 拿到最后一个小球的人为失败</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>此题可以通过状态转移方程进行计算, 从而避免使用递归的方法, 减少了运算量</li>
<li>当球的数目为0时, 为必胜态, arr[0] = true</li>
<li>只要能转移到必败态的一定是必胜态</li>
<li>无法转移到必胜态的是必败态</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> arr[<span class="number">10500</span>];</div><div class="line"><span class="keyword">int</span>  query[<span class="number">150</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    arr[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">int</span> prob[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9999</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i - prob[j] &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(arr[i - prob[j]] == <span class="literal">false</span>)</div><div class="line">            &#123;</div><div class="line">                arr[i] = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j == <span class="number">3</span>)</div><div class="line">            &#123;</div><div class="line">                arr[i] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//    for(int i = 0; i &lt;= 100; i++)</span></div><div class="line"><span class="comment">//        cout &lt;&lt; arr[i] &lt;&lt; " ";</span></div><div class="line">    <span class="keyword">int</span> nQuery;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nQuery;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nQuery; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; val;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[val] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt; 现在有n个小球，每次从盒子中取出的小球数目必须是1, 3, 7, 8个, 不可弃权, 拿到最后一个小球的人为失败&lt;/p&gt;

    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="博弈论" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>C++产生随机数</title>
    <link href="http://yoursite.com/2017/03/29/C-%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/29/C-产生随机数/</id>
    <published>2017-03-29T13:14:26.000Z</published>
    <updated>2017-03-29T13:47:58.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前-tu-言-cao"><a href="#前-tu-言-cao" class="headerlink" title="前(tu)言(cao)"></a>前(tu)言(cao)</h2><blockquote>
<p>在做蓝桥2012预赛试题的时候， 做到“夺冠概率”这道题， 明明可以用数学上的方法求解。 结果，必须使用随机数，因为三次运行程序结果相同不给分。。。</p>
</blockquote>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>足球比赛具有一定程度的偶然性，弱队也有战胜强队的可能。<br>假设有甲、乙、丙、丁四个球队。根据他们过去比赛的成绩，得出每个队与另一个队对阵时取胜的概率表:<br>    &nbsp;    &nbsp;    &nbsp;    &nbsp;甲  乙  丙  丁<br>甲   -  0.1 0.3 0.5<br>乙 0.9  -   0.7 0.4<br>丙 0.7  0.3 -   0.2<br>丁 0.5  0.6 0.8 -<br>数据含义：甲对乙的取胜概率为0.1，丙对乙的胜率为0.3，…<br>现在要举行一次锦标赛。双方抽签，分两个组比，获胜的两个队再争夺冠军。（参见【1.jpg】）<br>请你进行10万次模拟，计算出甲队夺冠的概率。</p>
</blockquote>
<p><img src="\img\championships.jpg" alt="&quot;图一&quot;"></p>
<h2 id="评测标准"><a href="#评测标准" class="headerlink" title="评测标准"></a>评测标准</h2><p>满分17分</p>
<p>编译选手提供的源代码，运行看结果</p>
<p>!! 至少运行3次，如果结果相同则不能得分！ 说明选手是用理论推算而非模拟方法。</p>
<p>输出四舍五入后为： 0.075  或  0.076 即可满分17分</p>
<p>如果输出 7.5 或 7.6 是采用了百分数的形式，也认为正确。</p>
<p>多次运行结果为：0.074 或 0.077 表明存在设计上的系统误差，可以给 5 分</p>
<h2 id="如何产生随机数"><a href="#如何产生随机数" class="headerlink" title="如何产生随机数"></a>如何产生随机数</h2><ol>
<li>添加头文件stdlib.h</li>
<li>由于rand()返回的是伪随机数字， 每次执行时结果是相同的</li>
<li><p>为了避免每次生成固定的随机数，引进srand()函数</p>
<blockquote>
<p>用法：srand(unsigned int seed)</p>
</blockquote>
</li>
<li><p>可以利用<time.h>中的随机函数初始化, 产生不同的随机种子</time.h></p>
</li>
<li>srand((unsigned)time(NULL))</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> arr[<span class="number">3</span>] = &#123;<span class="number">0.046</span>, <span class="number">0.102</span>, <span class="number">0.08</span>&#125;;</div><div class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="comment">//这里srand只能写在for循环外侧，否则会WA</span></div><div class="line">	<span class="comment">//看来srand的seed整个程序运行时只执行一次即可</span></div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span> ; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> val = rand() % <span class="number">3</span>;</div><div class="line">        sum = sum + arr[val];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; sum / <span class="number">100000</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前-tu-言-cao&quot;&gt;&lt;a href=&quot;#前-tu-言-cao&quot; class=&quot;headerlink&quot; title=&quot;前(tu)言(cao)&quot;&gt;&lt;/a&gt;前(tu)言(cao)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在做蓝桥2012预赛试题的时候， 做到“夺冠概
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
      <category term="随机数" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>微生物增殖</title>
    <link href="http://yoursite.com/2017/03/29/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%A2%9E%E6%AE%96/"/>
    <id>http://yoursite.com/2017/03/29/微生物增殖/</id>
    <published>2017-03-29T12:42:06.000Z</published>
    <updated>2017-03-29T13:12:57.409Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>题目来源<br>2012年蓝桥杯预赛</p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>假设有两种微生物 X 和 Y<br>X出生后每隔3分钟分裂一次（数目加倍），Y出生后每隔2分钟分裂一次（数目加倍）。<br>一个新出生的X，半分钟之后吃掉1个Y，并且，从此开始，每隔1分钟吃1个Y。<br>现在已知有新出生的 X=10, Y=89，求60分钟后Y的数目。<br>如果X=10，Y=90  呢？<br>本题的要求就是写出这两种初始条件下，60分钟后Y的数目。<br>题目的结果令你震惊吗？这不是简单的数字游戏！真实的生物圈有着同样脆弱的性质！也许因为你消灭的那只 Y 就是最终导致 Y 种群灭绝的最后一根稻草！<br>请忍住悲伤，把答案写在“解答.txt”中，不要写在这里！</p>
</blockquote>
<h2 id="思路与感悟"><a href="#思路与感悟" class="headerlink" title="思路与感悟"></a>思路与感悟</h2><p>遇到这种模拟类的题目，最好还是不要随意更改题目，先<strong>按照0.5秒来模拟</strong>一下， <strong>打表</strong>， <strong>找出规律</strong>后再为了<strong>计算的精确性</strong>， <strong>更改时间周期</strong>。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nX, nY;</div><div class="line">    nX = <span class="number">10</span>;</div><div class="line">    nY = <span class="number">90</span>;</div><div class="line">    <span class="comment">// i 为 0.5分钟</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">120</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            nY = nY - nX;</div><div class="line">        <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>)</div><div class="line">            nY = nY * <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(i % <span class="number">6</span> == <span class="number">0</span>)</div><div class="line">            nX = nX * <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; nX &lt;&lt; <span class="string">" "</span> &lt;&lt; nY;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/qsyzb/article/details/19156551?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">丁棒儿的博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目来源&lt;br&gt;2012年蓝桥杯预赛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;blockquote&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="模拟算法" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>国际歌</title>
    <link href="http://yoursite.com/2017/03/28/%E5%9B%BD%E9%99%85%E6%AD%8C/"/>
    <id>http://yoursite.com/2017/03/28/国际歌/</id>
    <published>2017-03-28T14:42:05.000Z</published>
    <updated>2017-04-23T13:21:18.516Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欧拉回路</title>
    <link href="http://yoursite.com/2017/03/27/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/03/27/欧拉回路/</id>
    <published>2017-03-27T14:43:26.000Z</published>
    <updated>2017-03-27T14:52:20.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>欧拉环：图中经过<em>每条边一次且仅一次</em>的<strong>环</strong>；<br>欧拉路径：图中经过<em>每条边一次且仅一次</em>的<strong>路径</strong>；<br>欧拉图：有<strong>至少一个欧拉环</strong>的图；<br>半欧拉图：<strong>没有欧拉环</strong>，但有<strong>至少一条欧拉路径</strong>的图。</p>
<h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><p>一个无向图是<strong>欧拉图</strong>当且仅当该图是连通的（注意，不考虑图中度为0的点，因为它们的存在对于图中是否存在欧拉环、欧拉路径没有影响）且<strong>所有点的度数都是偶数</strong>；一个无向图是<strong>半欧拉图</strong>当且仅当该图是连通的且<strong>有且只有2个点的度数是奇数</strong>（此时这两个点只能作为欧拉路径的起点和终点）；</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>因为任意一个点，欧拉环（或欧拉路径）从它这里进去多少次就要出来多少次，故(进去的次数+出来的次数)为偶数，又因为(进去的次数+出来的次数)=该点的度数（根据定义），所以该点的度数为偶数。</p>
<h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><p>一个有向图是<strong>欧拉图</strong>当且仅当该图的基图（将所有有向边变为无向边后形成的无向图，这里同样不考虑度数为0的点）是连通的且<strong>所有点的入度等于出度</strong>；一个有向图是<strong>半欧拉图</strong>当且仅当该图的基图是连通的且<strong>有且只有一个点的入度比出度少1</strong>（作为欧拉路径的起点），<strong>有且只有一个点的入度比出度多1</strong>（作为终点），其余点的入度等于出度。</p>
<h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>与无向图证明类似，一个点进去多少次就要出来多少次。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.chinaunix.net/uid-26380419-id-3164913.html" target="_blank" rel="external">dingchao</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;欧拉环：图中经过&lt;em&gt;每条边一次且仅一次&lt;/em&gt;的&lt;strong&gt;环&lt;/strong&gt;；&lt;br&gt;欧拉路径：图中经过&lt;em&gt;每条边一次且仅
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="欧拉回路" scheme="http://yoursite.com/tags/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>图上的关键点-并查集</title>
    <link href="http://yoursite.com/2017/03/27/%E5%9B%BE%E4%B8%8A%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2017/03/27/图上的关键点-并查集/</id>
    <published>2017-03-27T13:29:32.000Z</published>
    <updated>2017-05-24T11:55:59.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>标题：风险度量</p>
<p>X星系的的防卫体系包含 n 个空间站。这 n 个空间站间有 m 条通信链路，构成通信网。<br>两个空间站间可能直接通信，也可能通过其它空间站中转。</p>
<p>对于两个站点x和y (x != y), 如果能找到一个站点z，使得：<br>当z被破坏后，x和y无法通信，则称z为关于x,y的关键站点。</p>
<p>显然，对于给定的两个站点，关于它们的关键点的个数越多，通信风险越大。</p>
<p>你的任务是：已知网络结构，求两站点之间的通信风险度，即：它们之间的关键点的个数。</p>
<p>输入数据第一行包含2个整数n(2 &lt;= n &lt;= 1000), m(0 &lt;= m &lt;= 2000),分别代表站点数，链路数。<br>空间站的编号从1到n。通信链路用其两端的站点编号表示。<br>接下来m行，每行两个整数 u,v (1 &lt;= u, v &lt;= n; u != v)代表一条链路。<br>最后1行，两个数u,v，代表被询问通信风险度的两个站点。</p>
<p>输出：一个整数，如果询问的两点不连通则输出-1.</p>
<p>例如：<br>用户输入：<br>7 6<br>1 3<br>2 3<br>3 4<br>3 5<br>4 5<br>5 6<br>1 6<br>则程序应该输出：<br>2</p>
</blockquote>
<h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><ol>
<li>最开始检查a, b两点是否联通，否则，输出 -1 程序结束</li>
<li>从1开始去除每一个点后，使用并查集检查是否在同一个集合中</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> nVer, nEdge;</div><div class="line"><span class="keyword">int</span> edge[<span class="number">2500</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> arr[<span class="number">1500</span>];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFather</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; nVer &gt;&gt; nEdge;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; edge[i][<span class="number">0</span>] &gt;&gt; edge[i][<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start, end;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; start &gt;&gt; end;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nVer; j++)</div><div class="line">    &#123;</div><div class="line">        arr[j] = j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nEdge; j++)</div><div class="line">    &#123;</div><div class="line">        merge(edge[j][<span class="number">0</span>], edge[j][<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(merge(start, end) == <span class="literal">false</span>)</div><div class="line">	&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="comment">//遍历每个去掉的点</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nVer; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//去除需要检查联通的两点，这两点不需要遍历</span></div><div class="line">	    <span class="keyword">if</span>(i == start || i == end)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nVer; j++)</div><div class="line">		&#123;</div><div class="line">			arr[j] = j;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//合并已知点</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nEdge; j++)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//已经去除的点不需要继续合并</span></div><div class="line">			<span class="keyword">if</span>(edge[j][<span class="number">0</span>] == i || edge[j][<span class="number">1</span>] == i)</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			merge(edge[j][<span class="number">0</span>], edge[j][<span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(merge(start, end) == <span class="literal">false</span>)</div><div class="line">		&#123;</div><div class="line">			cnt++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFather</span><span class="params">(<span class="keyword">int</span> node)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(arr[node] == node)</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	node = getFather(arr[node]);</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> t1, <span class="keyword">int</span> t2)</span></span></div><div class="line">&#123;</div><div class="line">	t1 = getFather(t1);</div><div class="line">	t2 = getFather(t2);</div><div class="line">	<span class="keyword">if</span>(t1 == t2)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(t1 &lt; t2)</div><div class="line">		arr[t2] = t1;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		arr[t1] = t2;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;标题：风险度量&lt;/p&gt;
&lt;p&gt;X星系的的防卫体系包含 n 个空间站。这 n 个空间站间有 m 条通信链路，构成通信
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
</feed>
