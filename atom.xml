<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhao70&#39;s Blog</title>
  <subtitle>记录，造轮子，进步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-11T04:06:03.049Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhao70</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>const关键字及使用</title>
    <link href="http://yoursite.com/2017/02/11/const%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/11/const关键字及使用/</id>
    <published>2017-02-11T03:26:39.000Z</published>
    <updated>2017-02-11T04:06:03.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><ul>
<li>const int MAX_VAL = 23;</li>
<li>const string SCHOOL_NAME = “QDU”;</li>
</ul>
<h2 id="定义常量指针"><a href="#定义常量指针" class="headerlink" title="定义常量指针"></a>定义常量指针</h2><blockquote>
<p>不可通过常量指针修改其所指向的内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int n, m;</div><div class="line">const int *p = &amp;n;</div><div class="line">*p = 5;//error</div><div class="line">n = 4; // ok</div><div class="line">p = &amp;m; //ok</div><div class="line">//常量指针可通过强制类型转化 转化为非常量指针</div><div class="line">int * p1 = (int *)p;//ok</div></pre></td></tr></table></figure>
<h2 id="定义常应用"><a href="#定义常应用" class="headerlink" title="定义常应用"></a>定义常应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int n;</div><div class="line">const int &amp;r = n;</div><div class="line">r = 5;</div><div class="line">n = 4;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义常量&quot;&gt;&lt;a href=&quot;#定义常量&quot; class=&quot;headerlink&quot; title=&quot;定义常量&quot;&gt;&lt;/a&gt;定义常量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;const int MAX_VAL = 23;&lt;/li&gt;
&lt;li&gt;const string SCHOOL_NAM
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>位运算Part2</title>
    <link href="http://yoursite.com/2017/02/11/%E4%BD%8D%E8%BF%90%E7%AE%97Part2/"/>
    <id>http://yoursite.com/2017/02/11/位运算Part2/</id>
    <published>2017-02-11T00:33:16.000Z</published>
    <updated>2017-02-11T01:25:47.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位运算的简单应用"><a href="#位运算的简单应用" class="headerlink" title="位运算的简单应用"></a>位运算的简单应用</h2><table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">位运算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">去掉最后一位</td>
<td style="text-align:center">(101101-&gt;10110)</td>
<td style="text-align:center">x &gt;&gt; 1</td>
</tr>
<tr>
<td style="text-align:center">在最后加一个 0</td>
<td style="text-align:center">(101101-&gt;1011010)</td>
<td style="text-align:center">x &lt;&lt; 1</td>
</tr>
<tr>
<td style="text-align:center">在最后加一个 1</td>
<td style="text-align:center">(101101-&gt;1011011)</td>
<td style="text-align:center">x &lt;&lt; 1+1</td>
</tr>
<tr>
<td style="text-align:center">把最后一位变成 1</td>
<td style="text-align:center">(101100-&gt;101101)</td>
<td style="text-align:center">x &#166; 1</td>
</tr>
<tr>
<td style="text-align:center">把最后一位变成 0</td>
<td style="text-align:center">(101101-&gt;101100)</td>
<td style="text-align:center">x &#166; 1-1</td>
</tr>
<tr>
<td style="text-align:center">最后一位取反</td>
<td style="text-align:center">(101101-&gt;101100)</td>
<td style="text-align:center">x ^ 1</td>
</tr>
<tr>
<td style="text-align:center">把右数第 k 位变成 1</td>
<td style="text-align:center">(101001-&gt;101101,k=3)</td>
<td style="text-align:center">x &#166; (1 &lt;&lt; (k-1))</td>
</tr>
<tr>
<td style="text-align:center">把右数第 k 位变成 0</td>
<td style="text-align:center">(101101-&gt;101001,k=3)</td>
<td style="text-align:center">x &amp; ! (1 &lt;&lt;(k-1))</td>
</tr>
<tr>
<td style="text-align:center">右数第 k 位取反</td>
<td style="text-align:center">(101001-&gt;101101,k=3)</td>
<td style="text-align:center">x ^ (1 &lt;&lt; (k-1))</td>
</tr>
<tr>
<td style="text-align:center">取末三位</td>
<td style="text-align:center">(1101101-&gt;101)</td>
<td style="text-align:center">x &amp; 7</td>
</tr>
<tr>
<td style="text-align:center">取末 k 位</td>
<td style="text-align:center">(1101101-&gt;1101,k=5)</td>
<td style="text-align:center">x &amp; (1 &lt;&lt; k-1)</td>
</tr>
<tr>
<td style="text-align:center">取右数第 k 位</td>
<td style="text-align:center">(1101101-&gt;1,k=4)</td>
<td style="text-align:center">x &gt;&gt; (k-1) &amp; 1</td>
</tr>
<tr>
<td style="text-align:center">把末 k 位变成 1</td>
<td style="text-align:center">(101001-&gt;101111,k=4)</td>
<td style="text-align:center">x &#166; (1 &lt;&lt; k-1)</td>
</tr>
<tr>
<td style="text-align:center">末 k 位取反</td>
<td style="text-align:center">(101001-&gt;100110,k=4)</td>
<td style="text-align:center">x ^ (1 &lt;&lt; k-1)</td>
</tr>
<tr>
<td style="text-align:center">把右边连续的 1 变成 0</td>
<td style="text-align:center">(100101111-&gt;100100000)</td>
<td style="text-align:center">x &amp; (x+1)</td>
</tr>
<tr>
<td style="text-align:center">把右起第一个 0 变成 1</td>
<td style="text-align:center">(100101111-&gt;100111111)</td>
<td style="text-align:center">x &#166; (x+1)</td>
</tr>
<tr>
<td style="text-align:center">把右边连续的 0 变成 1</td>
<td style="text-align:center">(11011000-&gt;11011111)</td>
<td style="text-align:center">x &#166; (x-1)</td>
</tr>
<tr>
<td style="text-align:center">取右边连续的 1</td>
<td style="text-align:center">(100101111-&gt;1111)</td>
<td style="text-align:center">(x ^ (x+1)) &gt;&gt; 1</td>
</tr>
<tr>
<td style="text-align:center">去掉右起第一个 1 的左边</td>
<td style="text-align:center">(100101000-&gt;1000)</td>
<td style="text-align:center">x &amp; (x ^ (x-1))</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;位运算的简单应用&quot;&gt;&lt;a href=&quot;#位运算的简单应用&quot; class=&quot;headerlink&quot; title=&quot;位运算的简单应用&quot;&gt;&lt;/a&gt;位运算的简单应用&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>位运算Part1</title>
    <link href="http://yoursite.com/2017/02/10/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2017/02/10/位运算/</id>
    <published>2017-02-10T01:29:13.000Z</published>
    <updated>2017-02-11T00:36:07.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六种位运算符"><a href="#六种位运算符" class="headerlink" title="六种位运算符"></a>六种位运算符</h1><hr>
<h2 id="amp-按位与"><a href="#amp-按位与" class="headerlink" title="&amp; 按位与"></a>&amp; 按位与</h2><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><ul>
<li>将变量某些位<strong>清0</strong>且同时保持其他位不变<br>  example: 将int变量n的低8位全置成0， 而其余位不变, n = n &amp; 0xffffff00;</li>
<li>获取变量中的某一位<br>  example: 判断一个int类型变量第n位是否是1(从右往左， 从0开始数), n &amp; 0x80 是否等于 0x80(即1000 0000)</li>
<li>判断一个数字的奇偶<br>  example: 一个数 ^ 1 的结果就是二进制的最末位</li>
</ul>
<h2 id="按位或"><a href="#按位或" class="headerlink" title="| 按位或"></a>| 按位或</h2><h3 id="用处-1"><a href="#用处-1" class="headerlink" title="用处"></a>用处</h3><ul>
<li>将变量某些位<strong>置1</strong>且同时保持其他位不变<br>  example: 将int类型变量n的低8位全置成1， 而其余位不变， n |= 0xff(1111 1111)</li>
<li>二进制特定位上无条件赋值<br>  example: 把二进制最末尾变1, (n | 1) - 1</li>
</ul>
<h2 id="按位异或"><a href="#按位异或" class="headerlink" title="^ 按位异或"></a>^ 按位异或</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul>
<li>相同取0，相异取1</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>若a ^ b = c, 那么就有 c ^ b = a以及 c ^ a = b.此规律可用来进行简单的加密和解密</li>
</ul>
<h3 id="用处-2"><a href="#用处-2" class="headerlink" title="用处"></a>用处</h3><ul>
<li><p>将变量某些位<strong>取反</strong>且同时保持其他位不变<br>  example: 将int类型变量n的低8位取反， 而其余位不变， n = n ^ 0xff(1111 1111)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0000 0000 1111 1111</div><div class="line">^</div><div class="line">0010 1110 1001 0000</div><div class="line">==</div><div class="line">0010 1110 0110 1111</div></pre></td></tr></table></figure>
</li>
<li><p>不使用中间变量交换a, b的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = a ^ b;</div><div class="line">b = a ^ b;</div><div class="line">a = a ^ b;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="按位非（单目）"><a href="#按位非（单目）" class="headerlink" title="~ 按位非（单目）"></a>~ 按位非（单目）</h2><h2 id="lt-lt-左移"><a href="#lt-lt-左移" class="headerlink" title="&lt;&lt; 左移"></a>&lt;&lt; 左移</h2><h3 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h3><ul>
<li>高位直接丢弃， 低位补0<h3 id="用处-3"><a href="#用处-3" class="headerlink" title="用处"></a>用处</h3></li>
<li>把一个数左移n位就相当于乘以2的n次方// 但可能改变符号<h2 id="gt-gt-右移"><a href="#gt-gt-右移" class="headerlink" title="&gt;&gt; 右移"></a>&gt;&gt; 右移</h2><h3 id="规则-2"><a href="#规则-2" class="headerlink" title="规则"></a>规则</h3></li>
<li>低位直接丢弃， 大多数C/C++编译器规定， 如果原符号位为1， 则右移时高位就补充1， 原符号位位0， 则右移时高位就补充0<h3 id="用处-4"><a href="#用处-4" class="headerlink" title="用处"></a>用处</h3></li>
<li>把一个数右移n位就相当于除以2的n次方（不改变符号）， 但时<strong>向小里取整</strong>， 而不是丢失小数位</li>
<li>写出一个表达式的值与 a的第n位相同(从右向左， 从0开始): (a &gt;&gt; n) &amp; 1 或 (a &amp; (1 &lt;&lt; n)) &gt;&gt; n //0 &lt;= n &lt; 31</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;六种位运算符&quot;&gt;&lt;a href=&quot;#六种位运算符&quot; class=&quot;headerlink&quot; title=&quot;六种位运算符&quot;&gt;&lt;/a&gt;六种位运算符&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;amp-按位与&quot;&gt;&lt;a href=&quot;#amp-按位与&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Plan170209</title>
    <link href="http://yoursite.com/2017/02/09/Plan170209/"/>
    <id>http://yoursite.com/2017/02/09/Plan170209/</id>
    <published>2017-02-09T09:13:14.000Z</published>
    <updated>2017-02-10T01:19:28.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017年2月9日的总结与计划"><a href="#2017年2月9日的总结与计划" class="headerlink" title="2017年2月9日的总结与计划"></a>2017年2月9日的总结与计划</h2><pre><code>今天是2017年2月9日， 距离开学还有8天， 距离蓝桥杯还有58天。
</code></pre><p>  这个假期到目前为止， 做了如下事情：</p>
<ol>
<li>学会github和linux的初级使用。</li>
<li>PAT 乙级刷到了满分。</li>
<li>参加蓝桥训练。</li>
</ol>
<p>但是在这个过程中觉得自己还有有很多的不足， </p>
<blockquote>
<p>学而不思则罔，思而不学则殆 ——《论语·为政》</p>
</blockquote>
<p>所以需要在剩下的一个周时间里， 整理刷题的解题报告。</p>
<p>在刷PAT乙级和蓝桥的时候自己总结了如下知识点， 对自己提高是很有帮助的</p>
<ol>
<li><strong>动态规划</strong>。</li>
<li>离散数学的<strong>矩阵乘法</strong>。</li>
<li><strong>位运算</strong>。</li>
<li>C语言的<strong>字符串</strong>（蓝桥比较喜欢考。</li>
<li>C++中的<strong>sort和qsort</strong>不同的适用情况和compare函数的编写以及对于二维数组的排序。</li>
<li>C++中的<strong>string类</strong>， 还有stringstream的各种方法。</li>
<li>C++的输入输出<strong>流</strong>清空， 和有效数字输出， 四舍五入， 前导零输出</li>
<li><strong>大整数</strong>的四则运算。</li>
<li>STL中<em>equal(), reverse()， find()</em>等方法的使用。</li>
<li>最大公约数， 最小公倍数的<strong>数学知识</strong>。</li>
<li><strong>快速幂</strong>。</li>
<li><em>pair, vector, stack, set, map</em>的使用</li>
<li>针对一些<strong>特殊题目</strong>的思路的总结。</li>
</ol>
<p>剩下几天的安排：</p>
<blockquote>
<p>看做过的题， 学新东西， 写博客， 看蓝桥视频， 看coursera的北大C++视频</p>
</blockquote>
<p>总之， 还是要打好基础， 一步一步来，假期七天肯定不够了， 开学慢慢来吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017年2月9日的总结与计划&quot;&gt;&lt;a href=&quot;#2017年2月9日的总结与计划&quot; class=&quot;headerlink&quot; title=&quot;2017年2月9日的总结与计划&quot;&gt;&lt;/a&gt;2017年2月9日的总结与计划&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;今天是2017年2月
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POJ2387 Til the Cows Come Home</title>
    <link href="http://yoursite.com/2016/12/03/POJ2387/"/>
    <id>http://yoursite.com/2016/12/03/POJ2387/</id>
    <published>2016-12-03T07:04:22.000Z</published>
    <updated>2016-12-03T07:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邻接矩阵实现"><a href="#邻接矩阵实现" class="headerlink" title="邻接矩阵实现"></a>邻接矩阵实现</h2><blockquote>
<p>水题做多会变傻的。 —— 静静学姐</p>
<p>最近做水题上瘾， 这道题无论如何还是要用邻接表做一遍，先用的dijkstra的邻接矩阵水一下，挖个坑： 以后要用邻接表做一遍！！！</p>
</blockquote>
<ul>
<li>注意判断重边即可~ （邻接矩阵多加个if语句就好</li>
</ul>
<p>我的代码：<a href="https://github.com/ZhaoQiling/Algorithm/blob/master/POJ/2387.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;邻接矩阵实现&quot;&gt;&lt;a href=&quot;#邻接矩阵实现&quot; class=&quot;headerlink&quot; title=&quot;邻接矩阵实现&quot;&gt;&lt;/a&gt;邻接矩阵实现&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;水题做多会变傻的。 —— 静静学姐&lt;/p&gt;
&lt;p&gt;最近做水题上瘾， 这道题无论如何
    
    </summary>
    
      <category term="algothrim" scheme="http://yoursite.com/categories/algothrim/"/>
    
    
      <category term="dijkstra" scheme="http://yoursite.com/tags/dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>函数指针和命令行参数</title>
    <link href="http://yoursite.com/2016/12/03/cmd-and-functionPoint/"/>
    <id>http://yoursite.com/2016/12/03/cmd-and-functionPoint/</id>
    <published>2016-12-03T02:42:44.000Z</published>
    <updated>2017-02-10T01:25:00.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数指针的声明"><a href="#函数指针的声明" class="headerlink" title="函数指针的声明"></a>函数指针的声明</h2><p>类型名 (* 指针变量名)(参数类型1, 参数类型2, ……)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*typeOfSort)(<span class="keyword">const</span> <span class="keyword">void</span> *elem1, <span class="keyword">const</span> <span class="keyword">void</span> *elem2);</div></pre></td></tr></table></figure></p>
<h2 id="可以通过strcmp函数比较输入的命令行，-来决定升序或降序排序"><a href="#可以通过strcmp函数比较输入的命令行，-来决定升序或降序排序" class="headerlink" title="可以通过strcmp函数比较输入的命令行， 来决定升序或降序排序"></a>可以通过<strong>strcmp函数</strong>比较输入的命令行， 来决定升序或降序排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"as"</span>))</div><div class="line">    typeOfSort = ascending;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"ds"</span>))</div><div class="line">    typeOfSort = dscending;</div></pre></td></tr></table></figure>
<h2 id="qosrt用-法："><a href="#qosrt用-法：" class="headerlink" title="qosrt用 法："></a>qosrt用 法：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void qsort(void *base,int nelem,int width,int (*fcmp)(const void *,const void *));</div></pre></td></tr></table></figure>
<p>参数： </p>
<ol>
<li>待排序数组首地址</li>
<li>数组中待排序元素数量</li>
<li>各元素的占用空间大小</li>
<li>指向函数的指针，用于确定排序的顺序</li>
</ol>
<h2 id="typeOfSort所指向的函数类型需要程序员自己编写"><a href="#typeOfSort所指向的函数类型需要程序员自己编写" class="headerlink" title="typeOfSort所指向的函数类型需要程序员自己编写"></a>typeOfSort所指向的函数类型需要程序员自己编写</h2><ol>
<li>如果 <em>elem1 在 </em>elem2之<strong>前</strong>返回<strong>负</strong>整数</li>
<li>如果 <em>elem1 在 </em>elem2之<strong>后</strong>返回<strong>正</strong>整数</li>
<li>如果 <em>elem1 与 elem2的<strong>顺序无所谓</strong>，返回**0</em></li>
</ol>
<h2 id="在比较具体数字之前需要将const-int-类型的指针转化为const-int-类型"><a href="#在比较具体数字之前需要将const-int-类型的指针转化为const-int-类型" class="headerlink" title="在比较具体数字之前需要将const int  类型的指针转化为const int 类型"></a>在比较具体数字之前需要将const int <em> 类型的指针转化为const int </em>类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *value1 = (<span class="keyword">const</span> <span class="keyword">int</span> *)elem1;</div></pre></td></tr></table></figure>
<h2 id="命令行参数以空格区分不同命令，如果要输入带有空格的字符串如-Hello-World-需使用双引号括起"><a href="#命令行参数以空格区分不同命令，如果要输入带有空格的字符串如-Hello-World-需使用双引号括起" class="headerlink" title="命令行参数以空格区分不同命令，如果要输入带有空格的字符串如 Hello World 需使用双引号括起"></a>命令行参数<strong>以空格区分</strong>不同命令，如果要输入带有空格的字符串如 Hello World 需使用<strong>双引号括起</strong></h2><p>argc: 代表启动程序时， 命令行参数的个数， C/C++规定， <strong>可执行程序本身的文件名， 也算作一个命令行参数</strong>， 因此， <strong>argc的值至少是1</strong><br>argv： 指针数组， 其中每个元素都是一个char* 类型的指针， 每个指针指向一个字符串， 若命令行参数内部用空格， 用双引号括起来即可， 如下实例中的”hello world”<br>如果输入的字符中带有双引号的话： 123”456 就是 123”””456 “A””B” 就是 “””A””””””B””” ， 带有百分号的话：%号转义就是两个百分比：%%<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">example：myprogram &quot;hello world&quot;</div></pre></td></tr></table></figure></p>
<hr>
<p>我的代码：<a href="https://github.com/ZhaoQiling/CplusplusLearn/blob/master/courseraPKU/functionPointer_cmd.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数指针的声明&quot;&gt;&lt;a href=&quot;#函数指针的声明&quot; class=&quot;headerlink&quot; title=&quot;函数指针的声明&quot;&gt;&lt;/a&gt;函数指针的声明&lt;/h2&gt;&lt;p&gt;类型名 (* 指针变量名)(参数类型1, 参数类型2, ……)&lt;br&gt;&lt;figure class=&quot;
    
    </summary>
    
      <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
      <category term="functionPointer" scheme="http://yoursite.com/tags/functionPointer/"/>
    
      <category term="cmd" scheme="http://yoursite.com/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>POJ3268 Silver Cow Party</title>
    <link href="http://yoursite.com/2016/11/27/POJ326868%E2%80%94-Dijkstra/"/>
    <id>http://yoursite.com/2016/11/27/POJ326868—-Dijkstra/</id>
    <published>2016-11-27T04:38:52.000Z</published>
    <updated>2016-11-27T05:34:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="带有反向图的Dijkstra"><a href="#带有反向图的Dijkstra" class="headerlink" title="带有反向图的Dijkstra"></a>带有反向图的Dijkstra</h2><blockquote>
<p>题目描述<br><a href="http://poj.org/problem?id=3268" target="_blank" rel="external">POJ3268 Silver Cow Party</a></p>
</blockquote>
<p>知识点:</p>
<ol>
<li>求<em>其他cow</em>到<em>目标cow</em>， 再返回原本所在位置的本质： 正向求<strong>目标cow到其他cow</strong>的距离 加 <strong>反向图</strong>后<strong>目标cow到其他cow</strong>的距离</li>
<li>反向图时，关于<em>对角线对称</em>的操作， 第二个for循环开始 <strong>j = i</strong>， 否则一个点被<strong>倒置两次</strong>，又<strong>回到</strong>了<strong>开始</strong>状态。</li>
<li>isVisit数组中的<em>要求的点partyPlace</em>， <strong>在开始dijkstra前设置为true</strong></li>
</ol>
<p>我的代码: <a href="https://github.com/ZhaoQiling/Algorithm/blob/master/POJ/3268.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;带有反向图的Dijkstra&quot;&gt;&lt;a href=&quot;#带有反向图的Dijkstra&quot; class=&quot;headerlink&quot; title=&quot;带有反向图的Dijkstra&quot;&gt;&lt;/a&gt;带有反向图的Dijkstra&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述&lt;br&gt;&lt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Dijkstra" scheme="http://yoursite.com/tags/Dijkstra/"/>
    
      <category term="POJ" scheme="http://yoursite.com/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ2551 Dungeon Master</title>
    <link href="http://yoursite.com/2016/11/24/POJ-2551-BFS/"/>
    <id>http://yoursite.com/2016/11/24/POJ-2551-BFS/</id>
    <published>2016-11-24T06:07:54.000Z</published>
    <updated>2016-11-24T06:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3D-BFS"><a href="#3D-BFS" class="headerlink" title="3D BFS"></a>3D BFS</h2><blockquote>
<p>题目描述<br><a href="http://poj.org/problem?id=2251" target="_blank" rel="external">POJ2551 Dungeon Master</a><br>感受：</p>
<ol>
<li>比图上的BFS多了一个维度， 多考虑一下就可以了， 就是代码量有点宏大</li>
<li>ACM是<em>多组输入输出</em>， <strong>一定记得清空 isVisit </strong>之类具有标记和存储功能的数组!!!!!</li>
</ol>
</blockquote>
<p>我的代码: <a href="https://github.com/ZhaoQiling/Algorithm/blob/master/POJ/2251.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3D-BFS&quot;&gt;&lt;a href=&quot;#3D-BFS&quot; class=&quot;headerlink&quot; title=&quot;3D BFS&quot;&gt;&lt;/a&gt;3D BFS&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述&lt;br&gt;&lt;a href=&quot;http://poj.org/problem?i
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="POJ" scheme="http://yoursite.com/tags/POJ/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>邻接表的数组实现</title>
    <link href="http://yoursite.com/2016/11/23/adjacencyListByArray/"/>
    <id>http://yoursite.com/2016/11/23/adjacencyListByArray/</id>
    <published>2016-11-23T01:23:24.000Z</published>
    <updated>2016-11-23T01:59:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="书没有博客详细系列"><a href="#书没有博客详细系列" class="headerlink" title="书没有博客详细系列"></a>书没有博客详细系列</h3><blockquote>
<p><a href="http://www.cnblogs.com/ahalei/p/3651334.html" target="_blank" rel="external">啊哈磊的博客园</a></p>
</blockquote>
<p>比较难以理解的部分</p>
<ol>
<li>利用<strong>i给各个边编号</strong>。</li>
<li>first存储了每个<em>点</em>第一条<strong>边</strong>的序号(i)</li>
<li>next存储第i<em>边</em>的下一条<strong>边</strong>的序号(i)</li>
<li>因为是<em>有向图</em>，每条边<strong>只能</strong>在一个邻接表中</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int nPoint, nSide;</div><div class="line">    cin &gt;&gt; nPoint &gt;&gt; nSide;</div><div class="line">    int u[10], v[10], w[10];</div><div class="line">    int first[10], next[10];</div><div class="line">    for(int i = 1; i &lt;= nPoint; i++)</div><div class="line">    &#123;</div><div class="line">        first[i] = -1;</div><div class="line">    &#125;</div><div class="line">    // i 是每条边的序号</div><div class="line">    //first存储了每个点第一条 边的序号</div><div class="line">    //next存储了第i边下一条边的序号</div><div class="line">    //因为是有向图， 所以每一边的只可能是一个点的第一条边或者下一条边</div><div class="line">    for(int i = 1; i &lt;= nSide; i++)</div><div class="line">    &#123;</div><div class="line">        cin &gt;&gt; u[i] &gt;&gt; v[i] &gt;&gt; w[i];</div><div class="line">        next[i] = first[u[i]];</div><div class="line">        first[u[i]] = i;</div><div class="line">    &#125;</div><div class="line">    for(int i = 1; i &lt;= nPoint; i++)</div><div class="line">    &#123;</div><div class="line">        int k = first[i];</div><div class="line">        while(k != -1)</div><div class="line">        &#123;</div><div class="line">            cout &lt;&lt; u[k] &lt;&lt; v[k] &lt;&lt; w[k] &lt;&lt; endl;</div><div class="line">            k = next[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;书没有博客详细系列&quot;&gt;&lt;a href=&quot;#书没有博客详细系列&quot; class=&quot;headerlink&quot; title=&quot;书没有博客详细系列&quot;&gt;&lt;/a&gt;书没有博客详细系列&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.c
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="aha" scheme="http://yoursite.com/tags/aha/"/>
    
  </entry>
  
  <entry>
    <title>推“一起开心团队_C语言基础习题“有感 part 0</title>
    <link href="http://yoursite.com/2016/11/19/pta%E2%80%94-part-0/"/>
    <id>http://yoursite.com/2016/11/19/pta—-part-0/</id>
    <published>2016-11-19T03:14:30.000Z</published>
    <updated>2016-11-21T13:09:50.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="part1-1-7-题"><a href="#part1-1-7-题" class="headerlink" title="part1: 1 - 7 题"></a>part1: 1 - 7 题</h2><h3 id="路漫漫其修远兮，汝应上下而刷题-——-强哥-（论水题的重要性"><a href="#路漫漫其修远兮，汝应上下而刷题-——-强哥-（论水题的重要性" class="headerlink" title="路漫漫其修远兮，汝应上下而刷题 —— 强哥 （论水题的重要性"></a>路漫漫其修远兮，汝应上下而刷题 —— 强哥 （论水题的重要性</h3><blockquote>
<p>题目描述<br><a href="https://pta.patest.cn/pta/test/2199/exam/3" target="_blank" rel="external">PTA 1 - 7题</a></p>
</blockquote>
<p>需要注意的地方</p>
<ol>
<li>（第三题， 素数对猜想）要求N是否为素数， <em>没有必要遍历(1, N)所有的整数</em>, 因为N若不是素数，必由两个属于(1, N)数相乘的得到， 而这两个数字肯定一个大于等于sqrt(N), 一个小于等于sqrt(N)，所以只需要求<strong>(1, sqrt[N]]</strong>即可， 可将10000降至100，大大提高效率，也可以计算<strong>[sqrt(N), N]</strong>, 效果相同。</li>
<li>（第四题，数组右移） 注意<strong>数组整体</strong>移动方向和<strong>top</strong>移动方向<strong>相反</strong>， 因为数组整体右移，所以相对于top移动方向为向左。</li>
<li>（第六题，找出不是两个数组共有的元素）我的思路是先求交集， 再求出不是交集的部分， 结果分没的全， 挖个坑， 以后再填。</li>
<li>（第七题, 矩阵运算) 输入的时候顺便就可求出各种和， 然后再<strong>加上</strong>被减了两次的元素。<br>PS： PTA的分数机制有点坑人啊， 明明不是一个难度的题， 分数却一样。 还有， 排名榜格式混乱是什么鬼Orz。</li>
</ol>
<p>我的代码： <a href="https://github.com/ZhaoQiling/Algorithm/tree/master/PTA/%E4%B8%80%E8%B5%B7%E5%BC%80%E5%BF%83C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E9%A2%98" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;part1-1-7-题&quot;&gt;&lt;a href=&quot;#part1-1-7-题&quot; class=&quot;headerlink&quot; title=&quot;part1: 1 - 7 题&quot;&gt;&lt;/a&gt;part1: 1 - 7 题&lt;/h2&gt;&lt;h3 id=&quot;路漫漫其修远兮，汝应上下而刷题-——-强哥-（
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>HDU1016 Prime Ring Problem</title>
    <link href="http://yoursite.com/2016/11/09/PrimeRingProblem_DFS/"/>
    <id>http://yoursite.com/2016/11/09/PrimeRingProblem_DFS/</id>
    <published>2016-11-09T08:02:28.000Z</published>
    <updated>2016-11-21T13:09:46.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单的DFS搜索"><a href="#简单的DFS搜索" class="headerlink" title="简单的DFS搜索"></a>简单的DFS搜索</h2><blockquote>
<p>题目描述<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1016" target="_blank" rel="external">HDU1016 Prime Ring Problem</a></p>
</blockquote>
<p>需要注意的地方</p>
<ol>
<li><em>最后一个环</em>和 <em>1</em> 的和 也为 <strong>素数</strong></li>
<li>输出的数字之间有空格，第一次就是因为这个报错</li>
</ol>
<p>我的代码: <a href="https://github.com/ZhaoQiling/Algorithm/blob/master/HDU/1016.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单的DFS搜索&quot;&gt;&lt;a href=&quot;#简单的DFS搜索&quot; class=&quot;headerlink&quot; title=&quot;简单的DFS搜索&quot;&gt;&lt;/a&gt;简单的DFS搜索&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述&lt;br&gt;&lt;a href=&quot;http://acm.hdu.e
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="HDU" scheme="http://yoursite.com/tags/HDU/"/>
    
  </entry>
  
  <entry>
    <title>POJ3278 Catch That Cow</title>
    <link href="http://yoursite.com/2016/11/09/CatchThatCow_BFS/"/>
    <id>http://yoursite.com/2016/11/09/CatchThatCow_BFS/</id>
    <published>2016-11-09T06:06:14.000Z</published>
    <updated>2016-11-21T13:09:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFS搜索"><a href="#BFS搜索" class="headerlink" title="BFS搜索"></a>BFS搜索</h2><blockquote>
<p>题目描述<br><a href="http://poj.org/problem?id=3278" target="_blank" rel="external">POJ3278 Catch That Cow</a></p>
</blockquote>
<p>遇到的坑：</p>
<ol>
<li>统计步数的BFS题，建一个<strong>结构体数组</strong>，其中的step统计<em>步数</em></li>
<li>每走一步的步数，新的节点的步数，一定是<strong>head节点的步数 +1 ！！</strong>！,切记不是自己的步数自增1， 被这个坑了好长时间</li>
<li>尝试三种不同方式可以使用<em>一个for循环嵌套三个if</em></li>
<li><strong>巨坑0</strong>: 考虑 开始时 农夫和牛在同一位置的情况</li>
<li><strong>巨坑1</strong>：在poj上数组不能开到100000， 也不能开到100001要不会报错， 考虑了半天改成了100010，AC。</li>
</ol>
<p>我的代码: <a href="https://github.com/ZhaoQiling/Algorithm/blob/master/POJ/3278.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BFS搜索&quot;&gt;&lt;a href=&quot;#BFS搜索&quot; class=&quot;headerlink&quot; title=&quot;BFS搜索&quot;&gt;&lt;/a&gt;BFS搜索&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述&lt;br&gt;&lt;a href=&quot;http://poj.org/problem?id=32
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="POJ" scheme="http://yoursite.com/tags/POJ/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>再解炸弹人</title>
    <link href="http://yoursite.com/2016/11/09/%E5%86%8D%E8%A7%A3%E7%82%B8%E5%BC%B9%E4%BA%BA_BFS/"/>
    <id>http://yoursite.com/2016/11/09/再解炸弹人_BFS/</id>
    <published>2016-11-09T02:32:29.000Z</published>
    <updated>2016-11-21T13:09:43.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单的BFS搜索"><a href="#简单的BFS搜索" class="headerlink" title="简单的BFS搜索"></a>简单的BFS搜索</h2><blockquote>
<p>题目描述<br><a href="http://www.tianchai.org/problem-12034.html" target="_blank" rel="external">再解炸弹人</a></p>
</blockquote>
<p>心得：</p>
<ol>
<li>利用一个结构体数组，对每个点进行出入队列操作</li>
<li>编写getNum时, 按照向<strong>四个</strong>不同方向扩展的思路，而不是<em>两条</em>交叉的直线</li>
<li>对每个head点的<em>四个方向</em>进行扩展，并且<strong>先判断</strong>是否可以加入队列，<strong>然后再</strong>加入队列</li>
<li>每有一个点加入队列后便<strong>tail++</strong>每判断四个点后便<strong>head++</strong></li>
<li>在对startX 和 startY 进行<strong>加入第一个节点</strong>操作时，虽然head 和 tail都可以进行相同的操作，但是<strong>入队操作需要使用tail</strong></li>
</ol>
<p>我的代码: <a href="https://github.com/ZhaoQiling/Algorithm/blob/master/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95/%E5%86%8D%E8%A7%A3%E7%82%B8%E5%BC%B9%E4%BA%BA.cpp" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单的BFS搜索&quot;&gt;&lt;a href=&quot;#简单的BFS搜索&quot; class=&quot;headerlink&quot; title=&quot;简单的BFS搜索&quot;&gt;&lt;/a&gt;简单的BFS搜索&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述&lt;br&gt;&lt;a href=&quot;http://www.tianc
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="aha" scheme="http://yoursite.com/tags/aha/"/>
    
  </entry>
  
  <entry>
    <title>解救小哈</title>
    <link href="http://yoursite.com/2016/11/07/%E6%8B%AF%E6%95%91%E5%B0%8F%E5%93%88_DFS/"/>
    <id>http://yoursite.com/2016/11/07/拯救小哈_DFS/</id>
    <published>2016-11-07T05:42:43.000Z</published>
    <updated>2016-11-27T05:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单的dfs搜索"><a href="#简单的dfs搜索" class="headerlink" title="简单的dfs搜索"></a>简单的dfs搜索</h2><hr>
<blockquote>
<p>题目描述：<br><a href="http://www.tianchai.org/problem-12032.html" target="_blank" rel="external">添柴，拯救小哈</a></p>
</blockquote>
<pre><code>一道比较水的DFS搜索题目，需要注意的是
</code></pre><ol>
<li>运用next数组进行下一步的加减，与八皇后问题可以<em>斜着走</em>的问题区别开，只能上下左右运动的需要定义一个next[4][2]的数组进行保存。</li>
<li>编写DFS只关心当前这一步要做什么，并且注意边界条件的判断，如此题的是否出界和是否有障碍物</li>
<li>标记数组的处理，为了防止死递归，所以需要标记数组，而下一步的决策取决于上面的标记，但是不能影响其他平行的决策，所以标记数组要<strong>及时</strong>复原。<br>我的代码： <a href="https://github.com/ZhaoQiling/Algorithm/blob/master/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95/%E8%A7%A3%E6%95%91%E5%B0%8F%E5%93%88.cpp" target="_blank" rel="external">github</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单的dfs搜索&quot;&gt;&lt;a href=&quot;#简单的dfs搜索&quot; class=&quot;headerlink&quot; title=&quot;简单的dfs搜索&quot;&gt;&lt;/a&gt;简单的dfs搜索&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;题目描述：&lt;br&gt;&lt;a href=&quot;http://www
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="aha" scheme="http://yoursite.com/tags/aha/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://yoursite.com/2016/11/06/my-new-post/"/>
    <id>http://yoursite.com/2016/11/06/my-new-post/</id>
    <published>2016-11-06T01:44:12.000Z</published>
    <updated>2016-11-06T03:02:03.960Z</updated>
    
    <content type="html"><![CDATA[<p>使用markdown</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用markdown&lt;/p&gt;

    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
