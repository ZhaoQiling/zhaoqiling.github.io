<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhao70&#39;s Blog</title>
  <subtitle>勿在浮沙筑高台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-12T12:23:26.271Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhao70</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT1045. Favorite Color Stripe</title>
    <link href="http://yoursite.com/2017/10/12/PAT%C2%961045-Favorite-Color-Stripe/"/>
    <id>http://yoursite.com/2017/10/12/PAT1045-Favorite-Color-Stripe/</id>
    <published>2017-10-12T11:54:50.000Z</published>
    <updated>2017-10-12T12:23:26.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  <a href="https://www.patest.cn/contests/pat-a-practise/1045" target="_blank" rel="external">1045. Favorite Color Stripe</a></p>
<p>  给定两个序列 a 和 b, 求 <strong>b 中元素</strong>按照 a 的<strong>子序列</strong>中元素出现的<strong>次序</strong> 的 最大公共序列长度.</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>  当 a 为 0 或者 b 为 0, 则平凡态为 0</p>
<blockquote>
<p>f(0, l) = f(m, 0) = 0</p>
</blockquote>
<ul>
<li><p>当 两个序列当前的末尾相同, 即 a[i] == a[j], 则当前长度等于原有长度 + 1.</p>
<blockquote>
<p>f(i, j) = f(i, j - 1) + 1<br>// m 相同代表末尾颜色相同, l - 1 表示先前(即长度减一)的状态.</p>
</blockquote>
</li>
<li><p>当两个序列当前的末尾不相同, 即 a[i] != a[j], 肯定不可以进行拼凑.<br>所以当前状态f(i, j)的值肯定由上一个 a[i] == a[j]的状态转移而来.<br>我们可以缩短a的长度来改变a的末尾元素, 即 f(i - 1, j).<br>或者缩短b的长度来改变b的末尾元素, 即f(i, j - 1).</p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">200</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxl = <span class="number">10000</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> dp[maxl];</div><div class="line"><span class="keyword">int</span> favo[maxm];</div><div class="line"><span class="keyword">int</span> stri[maxl];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m, l;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%*d%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;favo[i]);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;stri[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= l; j++)</div><div class="line">            <span class="keyword">if</span>(favo[i] == stri[j])</div><div class="line">                dp[j] = dp[j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp[j] &lt; dp[j - <span class="number">1</span>])</div><div class="line">                dp[j] = dp[j - <span class="number">1</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[l]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;https://www.patest.cn/contests/pat-a-practise/1045&quot;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="PAT" scheme="http://yoursite.com/tags/PAT/"/>
    
      <category term="LIS" scheme="http://yoursite.com/tags/LIS/"/>
    
  </entry>
  
  <entry>
    <title>PAT1043. Is It a Binary Search Tree</title>
    <link href="http://yoursite.com/2017/10/11/PAT1043-Is-It-a-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2017/10/11/PAT1043-Is-It-a-Binary-Search-Tree/</id>
    <published>2017-10-11T13:21:49.000Z</published>
    <updated>2017-10-12T00:02:20.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1043" target="_blank" rel="external">1043. Is It a Binary Search Tree</a><br>  注意此处的二叉搜索树定义</p>
<blockquote>
<p>The <strong>left subtree</strong> of a node contains only nodes with keys <strong>less than</strong> the node’s key.<br>  The <strong>right subtree</strong> of a node contains only nodes with keys <strong>greater than</strong> or <strong>equal to</strong> the node’s key.<br>  Both the left and right subtrees must also be binary search trees.</p>
</blockquote>
<p>  PS: 没认真读题还去找强哥问, 真是切腹自尽算了…</p>
<p>  给定前序遍历, 问是一棵BST还是镜像BST, 是的话, 则输出YES, 以及后序遍历, 否则, 输出NO.</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>  最开始写了四个函数(判断是否BST, 判断是否镜像BST, 求BST的后序, 求镜像BST的后序). 后来看了柳婼的code, 发现只需要一个函数. <strong>直接求后序</strong>, 然后一个<strong>全局变量标记是否为镜像</strong>, 进行不同的判断. 如果<strong>不是BST</strong>的话, 则<strong>不会遍历所有结点</strong>(return 会提前返回), 因此<strong>长度不足n</strong>. 同理可以判断是否为镜像BST. </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preOrder;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postOrder;</div><div class="line"><span class="keyword">bool</span> isMirror = <span class="literal">false</span>;</div><div class="line"><span class="keyword">int</span> nNode;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prPostOrder</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNode; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; postOrder[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bst</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(end &lt; begin)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(begin == end)&#123;</div><div class="line">        postOrder.push_back(preOrder[begin]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> rootKey = preOrder[begin];</div><div class="line">	<span class="comment">//注意此处i, j的含义 以及 初始值</span></div><div class="line">    <span class="keyword">int</span> i = end;</div><div class="line">    <span class="keyword">int</span> j = begin + <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(isMirror == <span class="literal">false</span>)&#123;</div><div class="line">        <span class="keyword">while</span>(i &gt;= begin + <span class="number">1</span> &amp;&amp; preOrder[i] &gt;= rootKey)</div><div class="line">            --i;</div><div class="line">        <span class="keyword">while</span>(j &lt;= end &amp;&amp; preOrder[j] &lt; rootKey)</div><div class="line">            ++j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">while</span>(i &gt;= begin + <span class="number">1</span> &amp;&amp; preOrder[i] &lt; rootKey)</div><div class="line">            --i;</div><div class="line">        <span class="keyword">while</span>(j &lt;= end &amp;&amp; preOrder[j] &gt;= rootKey)</div><div class="line">            ++j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(i &gt; j)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    bst(begin + <span class="number">1</span>, i);</div><div class="line">    bst(j, end);</div><div class="line">    postOrder.push_back(rootKey);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nNode;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNode; i++)&#123;</div><div class="line">        <span class="keyword">int</span> key;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; key;</div><div class="line">        preOrder.push_back(key);</div><div class="line">    &#125;</div><div class="line">    bst(<span class="number">0</span>, nNode - <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(postOrder.size() != nNode)&#123;</div><div class="line">        isMirror = <span class="literal">true</span>;</div><div class="line">        postOrder.clear();</div><div class="line">        postOrder.resize(<span class="number">0</span>);</div><div class="line">        bst(<span class="number">0</span>, nNode - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(postOrder.size() == nNode)</div><div class="line">        prPostOrder();</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.patest.cn/contests/pat-a-practise/1043&quot; t
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="PAT" scheme="http://yoursite.com/tags/PAT/"/>
    
      <category term="BST" scheme="http://yoursite.com/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>PAT1038. Recover the Smallest Number</title>
    <link href="http://yoursite.com/2017/10/08/PAT1038-Recover-the-Smallest-Number/"/>
    <id>http://yoursite.com/2017/10/08/PAT1038-Recover-the-Smallest-Number/</id>
    <published>2017-10-08T11:26:47.000Z</published>
    <updated>2017-10-08T11:38:39.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1038" target="_blank" rel="external">1038. Recover the Smallest Number</a></p>
<p>  给定 n 个数字片段, 求这个所能组成的最大数值是多少, 输出并忽略前导 0.</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>  不能简单的按照字典序排序, 因为有320, 32, 8 这种情况, 若<strong>简单按照字典序进行排序</strong>, 会出现 <strong>323208</strong>, 而<strong>真正的答案</strong>是 <strong>320328</strong>.</p>
<p>  假设序列中有相邻的数字片段a, b. 若a, b交换位置能使 a + b &lt; b + a (因为二者长度相同, 所以比较字典序即可) 则序列可以变小, 所以最终答案也是这个顺序, 给 sort 函数传一个 cmp 即可.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">aFuckingAmazingCmp</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; a, <span class="keyword">const</span> <span class="built_in">string</span>&amp; b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b &lt; b + a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nNum;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nNum;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; arr;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNum; i++)&#123;</div><div class="line">        <span class="built_in">string</span> s;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">        arr.push_back(s);</div><div class="line">    &#125;</div><div class="line">    sort(arr.begin(), arr.end(), aFuckingAmazingCmp);</div><div class="line">    <span class="built_in">string</span> s = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNum; i++)</div><div class="line">        s += arr[i];</div><div class="line">    <span class="keyword">while</span>(s.size() != <span class="number">0</span> &amp;&amp; s[<span class="number">0</span>] == <span class="string">'0'</span>)</div><div class="line">        s.erase(s.begin());</div><div class="line">    <span class="keyword">if</span>(s.size() == <span class="number">0</span>)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.patest.cn/contests/pat-a-practise/1038&quot; t
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="好题" scheme="http://yoursite.com/tags/%E5%A5%BD%E9%A2%98/"/>
    
      <category term="PAT" scheme="http://yoursite.com/tags/PAT/"/>
    
      <category term="思维题" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>PAT1030. Travel Plan</title>
    <link href="http://yoursite.com/2017/10/02/PAT1030-Travel-Plan/"/>
    <id>http://yoursite.com/2017/10/02/PAT1030-Travel-Plan/</id>
    <published>2017-10-02T15:29:43.000Z</published>
    <updated>2017-10-02T15:46:49.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  <a href="https://www.patest.cn/contests/pat-a-practise/1030" target="_blank" rel="external">PAT1030</a></p>
<p>  给定一个图, 图中边有<strong>两类边权</strong>, <em>路径长度</em> 和 <em>花费</em>, 选择<strong>路径长度最短</strong>的路线, 并保存. 当<strong>存在相同长度</strong>的最优解, <strong>花费最小</strong>的解.</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>  按照<strong>路径长度</strong>进行边的松弛, 此时不要忘记<strong>对花费进行松弛</strong>.<br>  当<strong>路径长度相同</strong>时, 按照花费进行松弛.</p>
<p>  <strong>保存图中最短路径时, 记录当前结点的前一个结点. 输出答案时, 回溯即可.</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> arrSize = <span class="number">510</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">9999999</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dist[arrSize][arrSize];</div><div class="line"><span class="keyword">int</span> cost[arrSize][arrSize];</div><div class="line"><span class="keyword">int</span> path[arrSize];</div><div class="line"><span class="keyword">int</span> disCost[arrSize];</div><div class="line"><span class="keyword">int</span> disDist[arrSize];</div><div class="line"><span class="keyword">bool</span> isVis[arrSize];</div><div class="line"><span class="keyword">int</span> nVertex, nEdge, srcCity, tarCity;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nVertex; i++)&#123;</div><div class="line">        path[i] = <span class="number">-1</span>;</div><div class="line">        disCost[i] = INF;</div><div class="line">        disDist[i] = INF;</div><div class="line">        isVis[i] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nVertex; j++)&#123;</div><div class="line">            dist[i][j] = cost[i][j] = INF;</div><div class="line">            <span class="keyword">if</span>(i == j)&#123;</div><div class="line">                dist[i][i] = cost[i][i] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nVertex &gt;&gt; nEdge &gt;&gt; srcCity &gt;&gt; tarCity;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge; i++)&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; dist[a][b] &gt;&gt; cost[a][b];</div><div class="line">        dist[b][a] = dist[a][b];</div><div class="line">        cost[b][a] = cost[a][b];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nVertex; i++)&#123;</div><div class="line">        disDist[i] = dist[srcCity][i];</div><div class="line">        disCost[i] = cost[srcCity][i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isVis[srcCity] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nVertex - <span class="number">1</span>; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line">        <span class="keyword">int</span> minV = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nVertex; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(isVis[j])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(disDist[j] &lt; minV)&#123;</div><div class="line">                minV = disDist[j];</div><div class="line">                u = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        isVis[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; nVertex; v++)&#123;</div><div class="line">            <span class="keyword">if</span>(disDist[u] + dist[u][v] &lt; disDist[v])&#123;</div><div class="line">                disDist[v] = disDist[u] + dist[u][v];</div><div class="line">                disCost[v] = disCost[u] + cost[u][v];</div><div class="line">                path[v] = u;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(disDist[u] + dist[u][v] == disDist[v])&#123;</div><div class="line">                <span class="keyword">if</span>(disCost[u] + cost[u][v] &lt; disCost[v])&#123;</div><div class="line">                    disCost[v] = disCost[u] + cost[u][v];</div><div class="line">                    path[v] = u;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sav;</div><div class="line">    <span class="keyword">int</span> p = tarCity;</div><div class="line">    <span class="keyword">while</span>(p != <span class="number">-1</span>)&#123;</div><div class="line">        sav.push(p);</div><div class="line">        p = path[p];</div><div class="line">    &#125;</div><div class="line">    sav.push(srcCity);</div><div class="line">    <span class="keyword">while</span>(!sav.empty())&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; sav.top() &lt;&lt; <span class="string">" "</span>;</div><div class="line">        sav.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; disDist[tarCity] &lt;&lt; <span class="string">" "</span> &lt;&lt; disCost[tarCity];</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;https://www.patest.cn/contests/pat-a-practise/1030&quot;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Dijkstra" scheme="http://yoursite.com/tags/Dijkstra/"/>
    
      <category term="保存路径" scheme="http://yoursite.com/tags/%E4%BF%9D%E5%AD%98%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT1026 Table Tennis</title>
    <link href="http://yoursite.com/2017/09/30/PAT1026-Table-Tennis/"/>
    <id>http://yoursite.com/2017/09/30/PAT1026-Table-Tennis/</id>
    <published>2017-09-30T02:57:29.000Z</published>
    <updated>2017-09-30T02:57:29.564Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POJ3660 Cow Contest</title>
    <link href="http://yoursite.com/2017/09/27/POJ3660-Cow-Contest/"/>
    <id>http://yoursite.com/2017/09/27/POJ3660-Cow-Contest/</id>
    <published>2017-09-27T05:16:36.000Z</published>
    <updated>2017-09-27T05:31:07.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  <a href="http://poj.org/problem?id=3660" target="_blank" rel="external">POJ3660 Cow Contest</a></p>
<p>  n 只牛之间进行比赛, 给定 m 条关于两只牛之间的强弱信息, 求有多少只牛排名确定.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>  若对于任意一只牛, 若知道比它排名高的牛有 x 只, 比它排名低的牛有 y 只, x + y == n - 1. 则可以知道这头牛的排名.</p>
<p>  利用 Floyd-Warshall, 求出图中的传递闭包, 若一个点与其他所有点的关系已知, 则可以求解这个点的排名.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> arrSize = <span class="number">110</span>;</div><div class="line"><span class="keyword">bool</span> edge[arrSize][arrSize];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nVertex, nEdge;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nVertex &gt;&gt; nEdge;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge; i++)&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class="line">        edge[a][b] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= nVertex; ++k)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nVertex; ++i)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nVertex; ++j)&#123;</div><div class="line">                <span class="keyword">if</span>(edge[i][k] &amp;&amp; edge[k][j])</div><div class="line">                    edge[i][j] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nVertex; ++i)&#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nVertex; ++j)&#123;</div><div class="line">            <span class="keyword">if</span>(i == j)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(edge[i][j] == <span class="literal">false</span> &amp;&amp; edge[j][i] == <span class="literal">false</span>)&#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">            cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;http://poj.org/problem?id=3660&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="POJ" scheme="http://yoursite.com/tags/POJ/"/>
    
      <category term="Floyd" scheme="http://yoursite.com/tags/Floyd/"/>
    
      <category term="传递闭包" scheme="http://yoursite.com/tags/%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85/"/>
    
      <category term="离散数学" scheme="http://yoursite.com/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>PAT1021 Deepest Root</title>
    <link href="http://yoursite.com/2017/09/26/PAT1021-Deepest-Root/"/>
    <id>http://yoursite.com/2017/09/26/PAT1021-Deepest-Root/</id>
    <published>2017-09-26T08:36:03.000Z</published>
    <updated>2017-09-26T10:18:34.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  <a href="https://www.patest.cn/contests/pat-a-practise/1021" target="_blank" rel="external">PAT1021 Deepest Root</a></p>
<p>  给定一个图, 问是否为连通图, 若不是, 则输出连通分量的数目. 否则, 以任一个点为根, 求树的最大深度, 输出这些根节点.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>用<strong>并查集</strong>检查图是否的连通图.</li>
<li>从<strong>任意一点</strong>进行dfs, 得到一个集合, <em>该集合的点即为 deepest root 的一部分</em>.</li>
<li>从上一步的集合中<strong>任意一点</strong>进行dfs, 得到一个集合.</li>
<li>答案集合 即为 2, 3步的合集.</li>
</ol>
<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>  设任一点为 A , 从点 A 到其他点的最大距离为 Lx, Lx 为局部最优解答, 由于图是连通的, 图中任意一点都可以到达点 A , 且距离 Ly &lt; Lx. 因此 第一次 dfs 得到的解 为 最终解 的 部分解.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> nNode;</div><div class="line"><span class="keyword">struct</span> Node&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeList;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> arrSize = <span class="number">10100</span>;</div><div class="line"><span class="keyword">int</span> arr[arrSize];</div><div class="line"><span class="keyword">bool</span> isVis[arrSize];</div><div class="line"><span class="built_in">vector</span>&lt;Node&gt; edge(arrSize);</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFather</span><span class="params">(<span class="keyword">int</span> loc)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr[loc] == loc)</div><div class="line">        <span class="keyword">return</span> loc;</div><div class="line">    loc = getFather(arr[loc]);</div><div class="line">    <span class="keyword">return</span> loc;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    a = getFather(a);</div><div class="line">    b = getFather(b);</div><div class="line">    <span class="keyword">if</span>(a &lt; b)</div><div class="line">        arr[b] = a;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        arr[a] = b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nNode + <span class="number">1</span>; i++)&#123;</div><div class="line">        arr[i] = i;</div><div class="line">        isVis[i] = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getComponents</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nNode; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] == i)</div><div class="line">            cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cnt;</div><div class="line">&#125;</div><div class="line"><span class="built_in">set</span> &lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"><span class="keyword">int</span> maxD = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> vertex, <span class="keyword">int</span> depth)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(depth &gt; maxD)&#123;</div><div class="line">        ans.clear();</div><div class="line">        maxD = depth;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(depth == maxD)</div><div class="line">        ans.insert(vertex);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[vertex].nodeList.size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(isVis[edge[vertex].nodeList[i]])</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        isVis[edge[vertex].nodeList[i]] = <span class="literal">true</span>;</div><div class="line">        dfs(edge[vertex].nodeList[i], depth + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt;  nNode;</div><div class="line">    <span class="keyword">if</span>(nNode == <span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNode - <span class="number">1</span>; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class="line">        merge(a, b);</div><div class="line">        edge[a].nodeList.push_back(b);</div><div class="line">        edge[b].nodeList.push_back(a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> cs = getComponents();</div><div class="line">    <span class="keyword">if</span>(cs != <span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: "</span> &lt;&lt; cs &lt;&lt; <span class="string">" components"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    init();</div><div class="line">    isVis[<span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    init();</div><div class="line">    isVis[*ans.begin()] = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; temp = ans;</div><div class="line">    ans.clear();</div><div class="line">    dfs(*temp.begin(), <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = temp.begin(); it != temp.end(); it++)&#123;</div><div class="line">        ans.insert(*it);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = ans.begin(); it != ans.end(); it++)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 1 2</span></div><div class="line"><span class="comment">// 5 4</span></div><div class="line"><span class="comment">// 2 4</span></div><div class="line"><span class="comment">// 2 3</span></div><div class="line"><span class="comment">// 3 6</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;https://www.patest.cn/contests/pat-a-practise/1021&quot;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="树的遍历" scheme="http://yoursite.com/tags/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="PAT" scheme="http://yoursite.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT1020 Tree Traversals</title>
    <link href="http://yoursite.com/2017/09/25/PAT1020-Tree-Traversals/"/>
    <id>http://yoursite.com/2017/09/25/PAT1020-Tree-Traversals/</id>
    <published>2017-09-25T02:44:27.000Z</published>
    <updated>2017-09-26T08:36:36.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  <a href="https://www.patest.cn/contests/pat-a-practise/1020" target="_blank" rel="external">PAT1020</a></p>
<p>  给定一棵树的后序和前序遍历, 求树的层序遍历.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>  不断进行递归, 当长度为 0 时, 返回空指针.<br>  柳婼的博客是利用一个大的数组进行存储结点, 但题目中给出了30 个结点, 最坏情况下需要 <strong>2 ^ 31 - 1</strong> 个结点. 虽然这道题用数组存储结点并不会出错, 但是为了 robust. 还是动态的创建结点比较好~</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>  要充分理解函数传参当中 postLoc, inLoc 是<strong>绝对位置</strong>, 而 length 为<strong>相对长度</strong>.<br>  函数参数写错了就很坑 QAQQQQQQQQQ</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> Node&#123;</div><div class="line">    Node *leftChild, *rightChild;</div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    Node(<span class="keyword">int</span> d, Node* l, Node* r)</div><div class="line">        : data(d), leftChild(l), rightChild(r)&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postOrder;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inOrder;</div><div class="line"><span class="function">Node* <span class="title">constructTree</span><span class="params">(<span class="keyword">int</span> postLoc, <span class="keyword">int</span> inLoc, <span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">    <span class="comment">// cout &lt;&lt; length &lt;&lt; endl;</span></div><div class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    Node* temp = <span class="keyword">new</span> Node(postOrder[postLoc + length - <span class="number">1</span>], <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> loc = inLoc;</div><div class="line">    <span class="keyword">for</span>(; loc &lt; inLoc + length</div><div class="line">            &amp;&amp; inOrder[loc] != postOrder[postLoc + length - <span class="number">1</span>]; loc++);</div><div class="line"></div><div class="line">    temp-&gt;leftChild = constructTree(postLoc, inLoc, loc - inLoc);</div><div class="line">    <span class="comment">//右子树的长度 为 中序的起始位置 + 中序长度 得到 中序终止位置</span></div><div class="line">    <span class="comment">//               再减去 左子树 和 根节点的长度和.</span></div><div class="line">    temp-&gt;rightChild = constructTree(postLoc + loc - inLoc, loc + <span class="number">1</span>, inLoc + length - loc - <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> nNode;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prTree</span><span class="params">(Node* root)</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;Node*&gt; que;</div><div class="line">    que.push(root);</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!que.empty())&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; que.front()-&gt; data;</div><div class="line">        cnt++;</div><div class="line">        <span class="keyword">if</span>(cnt != nNode)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">        <span class="keyword">if</span>(que.front()-&gt;leftChild != <span class="literal">NULL</span>)</div><div class="line">            que.push(que.front()-&gt;leftChild);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(que.front()-&gt;rightChild != <span class="literal">NULL</span>)</div><div class="line">            que.push(que.front()-&gt;rightChild);</div><div class="line"></div><div class="line">        que.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nNode;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNode; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> data;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; data;</div><div class="line">        postOrder.push_back(data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNode; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> data;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; data;</div><div class="line">        inOrder.push_back(data);</div><div class="line">    &#125;</div><div class="line">    Node* root = constructTree(<span class="number">0</span>, <span class="number">0</span>, nNode);</div><div class="line">    prTree(root);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;https://www.patest.cn/contests/pat-a-practise/1020&quot;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="树的遍历" scheme="http://yoursite.com/tags/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
      <category term="PAT" scheme="http://yoursite.com/tags/PAT/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ1860 Currency Exchange</title>
    <link href="http://yoursite.com/2017/09/23/POJ1860-Currency-Exchange/"/>
    <id>http://yoursite.com/2017/09/23/POJ1860-Currency-Exchange/</id>
    <published>2017-09-23T02:16:32.000Z</published>
    <updated>2017-09-23T02:40:10.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  <a href="http://poj.org/problem?id=1860" target="_blank" rel="external">POJ1860</a></p>
<p>  给定一个带有点权和边权的图, 求是否存在正权回路.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>  由于Bellman-Ford算法可以求图中是否存在负权回路. 因此可以将 dis数组的初始状态置为 0, 求是否存在正权回路.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    Edge(<span class="keyword">int</span> a_, <span class="keyword">int</span> b_, <span class="keyword">double</span> r_, <span class="keyword">double</span> c_)</div><div class="line">        : a(a_), b(b_), rate(r_), commi(c_)&#123;&#125;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">double</span> rate, commi;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> arrSize = <span class="number">210</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nEdge, nVertex, amoCur;</div><div class="line">    <span class="keyword">double</span> vCur;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nVertex &gt;&gt; nEdge &gt;&gt; amoCur &gt;&gt; vCur;</div><div class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edge;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class="line">        <span class="keyword">double</span> r, c;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</div><div class="line">        edge.push_back(Edge(a, b, r, c));</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</div><div class="line">        edge.push_back(Edge(b, a, r, c));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> dis[arrSize];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nEdge * <span class="number">2</span>; i++)</div><div class="line">        dis[i] = <span class="number">0</span>;</div><div class="line">    dis[amoCur] = vCur;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nVertex; i++)&#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; edge.size(); j++)&#123;</div><div class="line">            <span class="keyword">if</span>(dis[edge[j].b] &lt; (dis[edge[j].a] - edge[j].commi) * edge[j].rate)&#123;</div><div class="line">                dis[edge[j].b] = (dis[edge[j].a] - edge[j].commi) * edge[j].rate;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(i == nVertex)&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;http://poj.org/problem?id=1860&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Bellman-Ford" scheme="http://yoursite.com/tags/Bellman-Ford/"/>
    
      <category term="Bellman-Ford变形" scheme="http://yoursite.com/tags/Bellman-Ford%E5%8F%98%E5%BD%A2/"/>
    
      <category term="正权回路" scheme="http://yoursite.com/tags/%E6%AD%A3%E6%9D%83%E5%9B%9E%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>About DEATH</title>
    <link href="http://yoursite.com/2017/09/22/About-DEATH/"/>
    <id>http://yoursite.com/2017/09/22/About-DEATH/</id>
    <published>2017-09-22T12:40:57.000Z</published>
    <updated>2017-09-22T12:42:40.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>若无牵无挂, 我宁愿迎接的是死亡, 而非自由. ​​​​</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;若无牵无挂, 我宁愿迎接的是死亡, 而非自由. ​​​​&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POJ2253 Frogger</title>
    <link href="http://yoursite.com/2017/09/21/POJ2253/"/>
    <id>http://yoursite.com/2017/09/21/POJ2253/</id>
    <published>2017-09-21T01:14:58.000Z</published>
    <updated>2017-09-21T09:47:04.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="http://poj.org/problem?id=2253" target="_blank" rel="external">POJ2253 Frogger</a></p>
<p>  图中的一个点到另一个点, 每条路径都有一个最大的跳跃长度, 求所有路径的最大跳跃长度当中最小值.</p>
<h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><p>  其实是考察最短路算法(Dijkstra, Floyd等)的变形, Dijkstra 和 Floyd 算法通常用来求最短路, 但其实只要改变边的<strong>松弛条件</strong>, 存储边的数组的含义便会发生改变, 比如<strong>PAT1003</strong>1(使用Dijkstra可以求<strong>带点权图</strong>的最短路).</p>
<h2 id="使用Dijkstra"><a href="#使用Dijkstra" class="headerlink" title="使用Dijkstra"></a>使用Dijkstra</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>  根据题目要求, dis数组的含义变为<em>从一个点出发, 到其他点的最长路径中的最小值</em>, 因此, dis的松弛条件变为 <strong>dis[v] = min(dis[v], max(dis[u], edge[u][v]))</strong>, 所以说用Dijkstra的变形的时候一定要考虑<strong>不同的松弛条件, dis数组的含义是不同的</strong></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">mina</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a &lt; b ? a : b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</div><div class="line"><span class="keyword">struct</span> Point&#123;</div><div class="line">  <span class="keyword">int</span> x, y;</div><div class="line">&#125;arr[maxn];</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDis</span><span class="params">(Point a, Point b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x  - b.x) + (a.y - b.y) * (a.y - b.y));</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> edge[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> nC)</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> dis[maxn];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nC; ++i)&#123;</div><div class="line">    dis[i] = edge[<span class="number">0</span>][i];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">bool</span> isVis[maxn];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nC; ++i)</div><div class="line">    isVis[i] = <span class="literal">false</span>;</div><div class="line">  isVis[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nC; ++i)&#123;</div><div class="line">    <span class="keyword">int</span> u;</div><div class="line">    <span class="keyword">double</span> min = <span class="number">99999</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nC; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(isVis[j])</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">if</span>(dis[j] &lt; min)&#123;</div><div class="line">        min = dis[j];</div><div class="line">        u = j;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    isVis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; nC; ++v)&#123;</div><div class="line">      dis[v] = mina(dis[v], max(dis[u], edge[u][v]));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> dis[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> nCase;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; nCase &amp;&amp; nCase != <span class="number">0</span>)&#123;</div><div class="line">    t++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">      <span class="built_in">cin</span> &gt;&gt; arr[i].x &gt;&gt; arr[i].y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxn; j++)</div><div class="line">        edge[i][j] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nCase; j++)&#123;</div><div class="line">        edge[i][j] = edge[j][i] = getDis(arr[i], arr[j]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// for(int i = 0; i &lt; nCase; i++)&#123;</span></div><div class="line">    <span class="comment">//   for(int j = 0; j &lt; nCase; j++)</span></div><div class="line">    <span class="comment">//     cout &lt;&lt; edge[i][j] &lt;&lt; " ";</span></div><div class="line">    <span class="comment">//   cout &lt;&lt; endl;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Scenario #"</span> &lt;&lt; t &lt;&lt; <span class="string">"\nFrog Distance = "</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt; dijkstra(nCase) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用Floyd"><a href="#使用Floyd" class="headerlink" title="使用Floyd"></a>使用Floyd</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>  同理, 根据题目要求, Floyed中的edge数组, 代表<em>不同两点之间最长路径的最小值</em>. 因此, 松弛条件为 <strong>edge[i][j] = min(edge[i][j], max(edge[i][k], edge[k][j]));</strong></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> Point&#123;</div><div class="line">  <span class="keyword">int</span> x, y;</div><div class="line">&#125;;</div><div class="line">Point arr[<span class="number">210</span>];</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDis</span><span class="params">(Point a, Point b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> edge[<span class="number">210</span>][<span class="number">210</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> nCase = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; nCase &amp;&amp; nCase != <span class="number">0</span>)&#123;</div><div class="line">    t++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i].x &gt;&gt; arr[i].y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nCase; j++)&#123;</div><div class="line">        edge[i][j] = edge[j][i] = getDis(arr[i], arr[j]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; nCase; k++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCase; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCase; j++)&#123;</div><div class="line">          edge[i][j] = min(edge[i][j], max(edge[i][k], edge[k][j]));</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Scenario #"</span> &lt;&lt; t &lt;&lt; <span class="string">"\nFrog Distance = "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt;edge[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  在进行最短路变形问题求解的时候, 一定要搞明白松弛条件和数组的含义, 松弛条件不同, 数组的含义也不同.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2253&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Dijkstra" scheme="http://yoursite.com/tags/Dijkstra/"/>
    
      <category term="Dijkstra变形" scheme="http://yoursite.com/tags/Dijkstra%E5%8F%98%E5%BD%A2/"/>
    
      <category term="Floyd" scheme="http://yoursite.com/tags/Floyd/"/>
    
      <category term="Floyd变形" scheme="http://yoursite.com/tags/Floyd%E5%8F%98%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>POJ1426 Find The Multiple</title>
    <link href="http://yoursite.com/2017/09/14/POJ1426-Find-The-Multiple/"/>
    <id>http://yoursite.com/2017/09/14/POJ1426-Find-The-Multiple/</id>
    <published>2017-09-14T03:24:19.000Z</published>
    <updated>2017-09-23T02:22:36.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  给定一个数字 n, 求 n 的一个倍数 m. m 的要求是一个只由 0 和 1 构成的十进制数字.</p>
<h2 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h2><p>  对于一个 m 第一位肯定为 1, 剩下的每一位有 0 和 1 两种情况, 如果进行穷举, 数会变得很大. 因此, 需要运用同余模定理, 减少中间数字规模.</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">（a*b）%n = （a%n *b%n）%n</div><div class="line">（a+b）%n = （a%n +b%n）%n</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxV = <span class="number">999999</span>;</div><div class="line"><span class="keyword">int</span> m[maxV];</div><div class="line"><span class="keyword">int</span> rec[maxV];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; val &amp;&amp; val) &#123;</div><div class="line">		<span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="keyword">sizeof</span>(m));</div><div class="line">		m[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span> (i = <span class="number">2</span>; m[i - <span class="number">1</span>] != <span class="number">0</span>; i++) &#123;</div><div class="line">			m[i] = (m[i / <span class="number">2</span>] * <span class="number">10</span> + i % <span class="number">2</span>) % val;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">		i--;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (i) &#123;</div><div class="line">			rec[len++] = i % <span class="number">2</span>;</div><div class="line">			i /= <span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">        <span class="keyword">while</span>(len)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; rec[--len];</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/lyy289065406/article/details/6647917" target="_blank" rel="external">POJ1426-Find The Multiple</a><br><a href="http://www.cnblogs.com/crazyapple/archive/2013/06/03/3116169.html" target="_blank" rel="external">poj 1426 Find The Multiple搜索BFS的思想+ 同余模定理+二叉树+01哈夫曼编码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  给定一个数字 n, 求 n 的一个倍数 m. m 的要求是一个只由 0 和 1 构成的十进制数字.&lt;/p&gt;
&lt;h2 id
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="同余模定理" scheme="http://yoursite.com/tags/%E5%90%8C%E4%BD%99%E6%A8%A1%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ3279 Fliptile</title>
    <link href="http://yoursite.com/2017/09/14/POJ3279-Fliptile/"/>
    <id>http://yoursite.com/2017/09/14/POJ3279-Fliptile/</id>
    <published>2017-09-14T00:37:51.000Z</published>
    <updated>2017-09-14T00:52:25.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>  给定一个矩阵， 其中有 0 和 1. 每次旋转可以将 0 变为 1, 将 1 变为 0. 但每次旋转一个方块时, 所有邻接的方块都会被旋转, 求字典序最小的旋转方式.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>  若给定第一行的旋转排列, 便可以得到整个矩阵的旋转方式. 矩阵最大为15 × 15 的标准, 因此可以使用状态压缩第一行, 求出剩下行数的旋转次数与方式, 并进行保存.</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">20</span>;</div><div class="line"><span class="keyword">int</span> nRow, nCol;</div><div class="line"><span class="keyword">int</span> tile[MAX][MAX];</div><div class="line"><span class="keyword">int</span> flip[MAX][MAX];</div><div class="line"><span class="keyword">int</span> opt[MAX][MAX];</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getColor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> cnt = tile[x][y];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> x1 = x + d[i][<span class="number">0</span>];</div><div class="line">		<span class="keyword">int</span> y1 = y + d[i][<span class="number">1</span>];</div><div class="line">		<span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; nRow &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; nCol)</div><div class="line">			cnt += flip[x1][y1];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cnt % <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cntF</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (getColor(i, j) == <span class="number">1</span>) &#123;</div><div class="line">				flip[i + <span class="number">1</span>][j] = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;</div><div class="line">		<span class="keyword">if</span> (getColor(nRow - <span class="number">1</span>, j) == <span class="number">1</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;</div><div class="line">			cnt += flip[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; nCol); ++i) &#123;</div><div class="line">		<span class="built_in">memset</span>(flip, <span class="number">0</span>, <span class="keyword">sizeof</span>(flip));</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; ++j) &#123;</div><div class="line">			flip[<span class="number">0</span>][nCol - <span class="number">1</span> - j] = (i &gt;&gt; j) &amp; <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> temp = cntF();</div><div class="line">		<span class="keyword">if</span> ((temp &gt;= <span class="number">0</span>) &amp;&amp; (res == <span class="number">-1</span> || res &gt; temp)) &#123;</div><div class="line">			res = temp;</div><div class="line">			<span class="built_in">memcpy</span>(opt, flip, <span class="keyword">sizeof</span>(flip));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; nRow &gt;&gt; nCol;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++)</div><div class="line">			<span class="built_in">cin</span> &gt;&gt; tile[i][j];</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (solve() == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; ++i)</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; ++j)</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, opt[i][j], j == nCol - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>); </div><div class="line">	&#125;</div><div class="line"><span class="comment">//	system("pause");</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;  给定一个矩阵， 其中有 0 和 1. 每次旋转可以将 0 变为 1, 将 1 变为 0. 但每次旋转一个方块时, 所有邻
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="状态压缩" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>I AM BACK</title>
    <link href="http://yoursite.com/2017/09/14/I-AM-BACK/"/>
    <id>http://yoursite.com/2017/09/14/I-AM-BACK/</id>
    <published>2017-09-14T00:35:36.000Z</published>
    <updated>2017-09-14T00:35:36.646Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pop Sequence</title>
    <link href="http://yoursite.com/2017/07/21/Pop-Sequence/"/>
    <id>http://yoursite.com/2017/07/21/Pop-Sequence/</id>
    <published>2017-07-21T13:10:53.000Z</published>
    <updated>2017-07-21T13:22:02.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定栈的大小m， 序列长度n， 和测试数据的个数k<br>每一组序列的入栈顺序都为 1 - n, 求每组出栈顺序能否成立。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于每一组序列， <strong>入栈次序都为 1 - n</strong>， 而<strong>出栈次序已经给出</strong>， 我们只需要一次入栈， 当栈顶元素为序列中的一个元素时即出栈， 模拟看是否能够实现。<br>设置cur变量指向序列中元素， <strong>循环进行1 - n的压栈操作</strong>， 当遇到cur指向的元素与栈顶元素相等即出栈， 直至不相等。 </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sizeOfStack, lenSeq, nSeq;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; sizeOfStack &gt;&gt; lenSeq &gt;&gt; nSeq;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; nSeq; k++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seq(lenSeq + <span class="number">1</span>);</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenSeq; i++)</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; seq[i];</div><div class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenSeq; i++)</div><div class="line">        &#123;</div><div class="line">            st.push(i);</div><div class="line">            <span class="keyword">if</span>(st.size() &gt; sizeOfStack)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">while</span>(st.empty() == <span class="literal">false</span> &amp;&amp; seq[cur] == st.top() )</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//cout &lt;&lt; st.top();</span></div><div class="line">                st.pop();</div><div class="line">                cur++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(cur == lenSeq + <span class="number">1</span>)</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span>    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定栈的大小m， 序列长度n， 和测试数据的个数k&lt;br&gt;每一组序列的入栈顺序都为 1 - n, 求每组出栈顺序能否成立。&lt;
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="PAT_Advanced" scheme="http://yoursite.com/tags/PAT-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>infixToSuffixExpresion</title>
    <link href="http://yoursite.com/2017/07/21/infixToSuffixExpresion/"/>
    <id>http://yoursite.com/2017/07/21/infixToSuffixExpresion/</id>
    <published>2017-07-21T12:18:11.000Z</published>
    <updated>2017-07-21T12:56:05.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将中缀表达式读入字符串, 不断读入字符。<br>若字符为<strong>数字</strong>, 则<em>直接打印</em>。<br>若字符为<strong>运算符</strong>, 若栈顶元素运算的优先级高于读入的运算符的优先级， 则弹出栈顶元素， 压栈读入的运算符。<br>需要特殊说明的是<strong>括号</strong>的优先级, <strong>左括号</strong>在<strong>压栈之前</strong>的优先级最高(括号的读取不能使任何之前的运算符进行出栈操作, 即所有操作都要等待括号的运算完成)， <strong>在栈中</strong>优先级最低（在括号中, 括号的存在不能影响任何括号内的运算）。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">infixToSuffixExpresion</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// (的优先级在栈中最低， 但没必要另建一个表</span></div><div class="line">		HashMap&lt;Character, Integer&gt; priorty = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line">		priorty.put(<span class="string">'('</span>, <span class="number">0</span>);</div><div class="line">		priorty.put(<span class="string">'+'</span>, <span class="number">1</span>); </div><div class="line">		priorty.put(<span class="string">'-'</span>, <span class="number">1</span>); </div><div class="line">		priorty.put(<span class="string">'*'</span>, <span class="number">2</span>); </div><div class="line">		priorty.put(<span class="string">'/'</span>, <span class="number">2</span>); </div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		String infix = in.next();</div><div class="line">		StringBuilder ans = <span class="keyword">new</span> StringBuilder();</div><div class="line">		Stack&lt;Character&gt; oper = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; infix.length(); ++i)</div><div class="line">		&#123;</div><div class="line">			Character c = infix.charAt(i);</div><div class="line">			<span class="keyword">if</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</div><div class="line">			&#123;</div><div class="line">				ans.append(c);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">true</span> == oper.isEmpty())</div><div class="line">			&#123;</div><div class="line">				oper.push(c);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(c == <span class="string">'('</span>)</div><div class="line">			&#123;</div><div class="line">				oper.push(c);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">')'</span> == c)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">while</span>(oper.peek() != <span class="string">'('</span>)</div><div class="line">				&#123;</div><div class="line">					ans.append(oper.peek());</div><div class="line">					oper.pop();</div><div class="line">				&#125;</div><div class="line">				oper.pop();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(priorty.get(oper.peek()) &gt;= priorty.get(c))</div><div class="line">			&#123;</div><div class="line">				ans.append(oper.peek());</div><div class="line">				oper.pop();</div><div class="line">				oper.push(c);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(priorty.get(oper.peek()) &lt; priorty.get(c))</div><div class="line">			&#123;</div><div class="line">				oper.push(c);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(oper.empty() == <span class="keyword">false</span>)</div><div class="line">		&#123;</div><div class="line">			ans.append(oper.peek());</div><div class="line">			oper.pop();</div><div class="line">		&#125;</div><div class="line">		System.out.println(ans);</div><div class="line">		<span class="comment">//System.out.println(oper.toString());</span></div><div class="line">		in.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中缀表达式转后缀表达式&quot;&gt;&lt;a href=&quot;#中缀表达式转后缀表达式&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转后缀表达式&quot;&gt;&lt;/a&gt;中缀表达式转后缀表达式&lt;/h2&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;head
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>秦九韶算法</title>
    <link href="http://yoursite.com/2017/07/21/%E7%A7%A6%E4%B9%9D%E9%9F%B6%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/07/21/秦九韶算法/</id>
    <published>2017-07-21T11:39:09.000Z</published>
    <updated>2017-07-21T12:10:18.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当处理一个多项式在 x = x0 处的值的时候, 不断地对求 x^n 是低效的。 尤其是当n很大的时候, pow(x, n)在多项式系数的循环当中将整个算法的复杂度变为O(n^2). </p>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p><img src="\img\Qinjiuzhao.png" alt="&quot;秦九韶算法&quot;"></p>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(n + <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; x;</div><div class="line">    <span class="keyword">int</span> ans = arr[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">    &#123;</div><div class="line">        ans = ans * x + arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QinJiuZhaoAlgorithm</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		<span class="keyword">int</span> nNum = in.nextInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nNum; i++)</div><div class="line">		&#123;</div><div class="line">			arr.add(in.nextInt());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> x = in.nextInt();</div><div class="line">		<span class="keyword">int</span> ans = arr.get(arr.size() - <span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = arr.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">		&#123;</div><div class="line">			ans = arr.get(i) + x * ans;</div><div class="line">		&#125;</div><div class="line">		System.out.println(ans);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;当处理一个多项式在 x = x0 处的值的时候, 不断地对求 x^n 是低效的。 尤其是当n很大的时候, pow(x, n)在多项式系数的循
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>HDU1584</title>
    <link href="http://yoursite.com/2017/05/08/HDU1584/"/>
    <id>http://yoursite.com/2017/05/08/HDU1584/</id>
    <published>2017-05-08T12:27:20.000Z</published>
    <updated>2017-05-08T13:08:21.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定<strong>值为1到10</strong>的纸牌的顺序，每张牌只能放在<strong>大一</strong>的纸牌上，每次移动的<strong>代价</strong>为<strong>两张牌的差值的绝对值</strong>， 求最小代价。</p>
<h2 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h2><p>在<strong>不改变</strong>数组排列顺序的前提下<strong>生成全排列</strong>的题，当然还要带上<strong>剪枝</strong>和<strong>关于回溯的判断</strong>， 真的是考察dfs的好题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> loc[<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> isUsed[<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">int</span> temp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//剪枝. 无论何时, 只要当前步数大于已知的ans(最大值), 就进行回溯</span></div><div class="line">    <span class="keyword">if</span>(ans &lt; temp)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//由于值为10的牌的特殊性, 不需要进行移动, 所以步数为9步即可得出结论</span></div><div class="line">    <span class="keyword">if</span>(step == <span class="number">9</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(ans &gt;= temp)</div><div class="line">            ans = temp;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//选择进行九张牌的移动, 移动九次</span></div><div class="line">    <span class="comment">//在第几层递归, 此循环就选择i当作, 该层的一个子树的根节点</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(isUsed[i])</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="comment">//选择移动到第几张牌的下面</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//比如要移1了，如果2,3,4,5都已经被移动过了 那么这几张牌必定叠放在6的下面，所以要移到6的位置</span></div><div class="line">            <span class="keyword">if</span>(isUsed[j])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            isUsed[i] = <span class="literal">true</span>;</div><div class="line">            dfs(step + <span class="number">1</span>, temp + <span class="built_in">abs</span>(loc[i] - loc[j]));</div><div class="line">            isUsed[i] = <span class="literal">false</span>;</div><div class="line">            <span class="comment">//注意不要再这个地方回溯 如果回溯了 就像是又一个全排列 而且牌得移动不合理，比如2移到6了，结果回溯就直接跳过3~6到了7的下面(比如: temp的值比ans更大, 但说不定2 -&gt; 6的移动是合法的, 但之后存在不合法的移动)</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nTest;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; nTest;</div><div class="line">    <span class="keyword">while</span>(nTest--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> val;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; val;</div><div class="line">            <span class="comment">//怎么存储数据也是有讲究的</span></div><div class="line">            loc[val] = i;</div><div class="line">            isUsed[i] = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        ans = <span class="number">9999999</span>;</div><div class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/flynn_curry/article/details/50775604" target="_blank" rel="external">hdu1584 蜘蛛牌（经典dfs）</a><br><a href="http://www.cnblogs.com/sook/archive/2011/03/27/1996775.html" target="_blank" rel="external">hdu 1584 蜘蛛牌</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定&lt;strong&gt;值为1到10&lt;/strong&gt;的纸牌的顺序，每张牌只能放在&lt;strong&gt;大一&lt;/strong&gt;的纸牌上
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="好题" scheme="http://yoursite.com/tags/%E5%A5%BD%E9%A2%98/"/>
    
      <category term="剪枝" scheme="http://yoursite.com/tags/%E5%89%AA%E6%9E%9D/"/>
    
  </entry>
  
  <entry>
    <title>HDU1097</title>
    <link href="http://yoursite.com/2017/05/03/HDU1097-A-hard-puzzle/"/>
    <id>http://yoursite.com/2017/05/03/HDU1097-A-hard-puzzle/</id>
    <published>2017-05-03T12:23:48.000Z</published>
    <updated>2017-05-03T12:33:49.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><blockquote>
<p>给定a, b求 a ^ b的个位数字.<br>(0&lt;a,b&lt;=2^30)</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题肯定是使用快速幂取模解题。<br>但是如果直接<strong>quickMod(a, b, c)</strong>肯定会<strong>爆掉</strong>，因为a最大值2 ^ 30在<strong>进入函数平方</strong>后， 会超出int数据类型， 所以应该<strong>quickMod(a % c, b, c)</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">quickMod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b % <span class="number">2</span>)</div><div class="line">            ans = (ans * a) % c;</div><div class="line">        a = (a * a) % c;</div><div class="line">        b /= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, quickMod(a % <span class="number">10</span>, b, <span class="number">10</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1097" target="_blank" rel="external">HDU1097</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定a, b求 a ^ b的个位数字.&lt;br&gt;(0&amp;lt;a,b&amp;lt;=2^30)&lt;/p&gt;
&lt;/
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
      <category term="快速幂取模" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>快速幂取模</title>
    <link href="http://yoursite.com/2017/05/03/%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/"/>
    <id>http://yoursite.com/2017/05/03/快速幂取模/</id>
    <published>2017-05-03T11:59:20.000Z</published>
    <updated>2017-05-03T12:21:50.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><p><img src="/img/quickMod.png" alt="quickMod"></p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>以 b 为偶数举例<br>a^b%c = ((a^2)^b/2)%c</p>
<p>若 b / 2仍为偶数， 那么<br>((a^2)^b/2)%c = (((a^2)^2)^(b/2)/2)%c</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> ^ <span class="number">16</span></div><div class="line">= (<span class="number">3</span>     * <span class="number">3</span>    ) ^ <span class="number">8</span></div><div class="line">= (<span class="number">3</span> ^ <span class="number">2</span> * <span class="number">3</span> ^ <span class="number">2</span>) ^ <span class="number">4</span> <span class="comment">//3^2 由上一步3 * 3得</span></div><div class="line">= (<span class="number">3</span> ^ <span class="number">4</span> * <span class="number">3</span> ^ <span class="number">4</span>) ^ <span class="number">2</span> <span class="comment">//3^4 由上一步3 ^ 2 * 3 ^ 2得</span></div><div class="line">= (<span class="number">3</span> ^ <span class="number">8</span> * <span class="number">3</span> ^ <span class="number">8</span>) ^ <span class="number">1</span> <span class="comment">//3^8 由上一步3 ^ 4 * 3 ^ 4得</span></div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQuickPow1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            ans = ans * a;</div><div class="line">        a = a * a;</div><div class="line">        b = b / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以取模<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQuickMod1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            ans = (ans * a) % c;</div><div class="line">        a = (a * a) % c;</div><div class="line">        b = b / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/u013174702/article/details/43761197" target="_blank" rel="external">快速幂取余算法总结详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速幂&quot;&gt;&lt;a href=&quot;#快速幂&quot; class=&quot;headerlink&quot; title=&quot;快速幂&quot;&gt;&lt;/a&gt;快速幂&lt;/h2&gt;&lt;h3 id=&quot;基本公式&quot;&gt;&lt;a href=&quot;#基本公式&quot; class=&quot;headerlink&quot; title=&quot;基本公式&quot;&gt;&lt;/a&gt;基本公
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
      <category term="快速幂" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
</feed>
